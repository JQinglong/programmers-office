<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2008 on Programmers Office</title><link>https://jqinglong.github.io/programmers-office/archives/2008/</link><description>Recent content in 2008 on Programmers Office</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Wed, 31 Dec 2008 07:24:44 +0000</lastBuildDate><atom:link href="https://jqinglong.github.io/programmers-office/archives/2008/index.xml" rel="self" type="application/rss+xml"/><item><title>駆け込みGAEO</title><link>https://jqinglong.github.io/programmers-office/%E9%A7%86%E3%81%91%E8%BE%BC%E3%81%BFgaeo/</link><pubDate>Wed, 31 Dec 2008 07:24:44 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E9%A7%86%E3%81%91%E8%BE%BC%E3%81%BFgaeo/</guid><description>Railsのように開発できる？Google App Engine Oil
http://doc.gaeo.org/Home
Google App Engine Oilが素晴らしい http://mattn.kaoriya.net/software/lang/python/20080729225154.htm
Google App Engine Oilを使って1分で出来る掲示板 http://mattn.kaoriya.net/software/lang/python/20081216160431.htm
Google App Engine用のアプリをRailsっぽく作ってみた http://blog.s21g.com/articles/1000
インストール pythonとGAEは入っているので、GAEOのインストールから。 http://doc.gaeo.org/tutorials/getting-started
まず、インストール方法には二つあり、easy_installを使用する方法と、zipをダンロードする方法と。
easy_installとは http://morchin.sakura.ne.jp/effective_python/easy_install.html
このサイトにあるように# ez_setup.py を使用するのが良さそうです。でもって、easy_install gaeo。これでインストールされます。 ずいぶん違うpathにインストールされたようですが、まあよいかな。
最初の一発目 http://doc.gaeo.org/tutorials/create-applications
の通りに、gaeo hello。ハロープロジェクトが作成されました、というメッセージに萌える人は萌えてください。で、ランチャーに登録して、起動して、実行すると、It works!!　となります。
Scaffoldの使用 上記で作成したフォルダに移動し、gaeogenでOK。フムフムという感じで進められます。 http://doc.gaeo.org/references/gaeo-utilities/gaeogenpy
まだちょっとドキュメント不足の感はありますが、こうやってパターン化されることはよいことでしょう。
UnitTestがないのは、残念。そこ、重要ではないでしょうか。
ということで、本年もありがとうございました。来年もよろしくお願いいたします。</description></item><item><title>Lang-8</title><link>https://jqinglong.github.io/programmers-office/lang-8/</link><pubDate>Mon, 29 Dec 2008 17:16:24 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/lang-8/</guid><description>Fujiwoさんの日記で、Lang-8というものを知り、入ってみました。
http://blog.shos.info/archives/2008/12/sns_lang8.html
これは面白そう！
とりあえず、翻訳サイトも駆使しながら、でもなるべく手入力を心がけて、中国語日記を書いてみました。
誰か添削してくれるかななな？
今日の発見
中国語（標準語）って、Mandarinだったんですね。知らなかった～
広東語はCantonese。
  リズムで学ぶ三文字中国語―iPod徹底活用! 清原 文代
アルク 2007-08-24
売り上げランキング : 22919 おすすめ平均 すばらしすぎる！！！！！！！！！！！
面白くてタメになる Amazonで詳しく見るby G-Tools</description></item><item><title>金沢工業大学</title><link>https://jqinglong.github.io/programmers-office/%E9%87%91%E6%B2%A2%E5%B7%A5%E6%A5%AD%E5%A4%A7%E5%AD%A6/</link><pubDate>Mon, 29 Dec 2008 14:33:59 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E9%87%91%E6%B2%A2%E5%B7%A5%E6%A5%AD%E5%A4%A7%E5%AD%A6/</guid><description>今朝の朝日新聞の「学長力」という記事。身近に出身者が多いこともあり、興味を持ちました。
「24時間365日オープンの自習室などを開設しました」
「教員には個々の研究室からセンターのオープンスペースに移動してもらい、質問に即応できる態勢をとっています」
「夢考房」「工作機械などがあり、部品もそろっています」
「夢考房プロジェクト」「学生が夢工房を使ってやりたいプロジェクトをプレゼンテーションし、合格すると予算もつく」
「月見光路」「光に関する授業をし、その知識を生かして学生が進める」
なかなか面白そうじゃないですか～
関連情報
http://business.nikkeibp.co.jp/article/manage/20080819/168241/
関連本もあるようです。
大学は学生に何ができるか―「学生を元気にさせる」大学改革とは 増田 晶文
プレジデント社 2003-12
売り上げランキング : 228089 おすすめ平均 タイトルにかなり期待したのだけれど Amazonで詳しく見るby G-Tools</description></item><item><title>遅刻の話</title><link>https://jqinglong.github.io/programmers-office/%E9%81%85%E5%88%BB%E3%81%AE%E8%A9%B1/</link><pubDate>Sat, 27 Dec 2008 03:13:20 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E9%81%85%E5%88%BB%E3%81%AE%E8%A9%B1/</guid><description>僕はこちらで言う厳しい人のようです。
http://heppokone.blog27.fc2.com/blog-entry-346.html
津田沼から秋葉原まで、黄色い電車で行くと35分かかります。と出ます。
で、8時35分に秋葉原駅に着きたいと思って、毎日8時の電車に乗る訳です。・・・それはないでしょって。
1年間に200日乗るとして、多分33分で着く日は2日もないでしょう。34分で着く日は5日くらいはありますかね。
70日くらいは35分で着きますかね。けど、60日くらいは36分かかるのではないでしょうか。10日くらいは40分かかるのでは。50分かかる日も何日かありますよね。平均35分で着くという訳ではない、リスクを考えれば目標時間の設定がまずい。
要するにグラフにするとこんな感じ。
見たことありますよね。
http://konnokiyotaka.txt-nifty.com/pgblog/2005/01/post_1.html
熊とワルツを &amp;#8211; リスクを愉しむプロジェクト管理 トム・デマルコ
おすすめ平均 リスク管理とは
リスクを理解するなら、これ１冊で十分！
リスク管理の本質
何も起きるはずはない、と信じる権利は誰にもない
みんなが読んでおいた方が良い、読むべき本。 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;amp;nbsp; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; で、自分はあまり遅刻しないのですが、先々週は水曜日の忘年会で調子に乗って3時くらいまで飲んでしまい、翌日意識がハッキリしたのは10時半でした。しかも、体が言うこときかず、出社できたのは14時。遅刻というのはこういうことを言うのだよ、と言うことにしておこう。 &amp;lt;/p&amp;gt;</description></item><item><title>普遍</title><link>https://jqinglong.github.io/programmers-office/%E6%99%AE%E9%81%8D/</link><pubDate>Sat, 06 Dec 2008 06:33:22 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%99%AE%E9%81%8D/</guid><description>業界にかかわらず、普遍的なことってありますよね。
家づくりの現場―マンガでわかる住宅業界 熱血棟梁!一平太が行く村瀬 春樹
by G-Tools
前書きにもありますが、顧客満足と最先端情報をテーマとして、提供側である工務店と顧客である施主の双方が幸せになるための方法が描かれています。
第1話　21世紀の”勝利の方程式”
第2話　リフォームはビッグビジネスになるのだ
第3話　顧客には「媚びず！甘えず！嫌われず！」
第4話　たいへんだ！高齢社会の住宅事情＆住宅市場
第5話　「地縁復活計画」！新しい住民たちと出会え
第1話は大手のモデルハウス戦略に対応すべくオープンハウス形式で「事例」を紹介しましょう、というような話ですが、それを地域コミュニティを組織して各業者が強みを集めてやりましょうという話が面白い。
第2話はリフォームニーズをくみ取るために、家事サービスから入っていこうという、ちょっと裏技的な話ですが、こちらの業界でも実運用を踏まえた設計をしようという話は大きなテーマであり、そのために業務支援サービスという話は大いにありかと感じられます。
第4話は最先端情報＋顧客満足の非常によい例。バリアフリーって、手すりをつけて段差をなくすだけの話ではないよね。ということで、そういう目に見えるバリアのほかに、例えば、部屋間の温度差とか、トイレへの行きやすさとかの目に見えないバリアへの対策を挙げています。何より、そういうバリアを発見する視点の大切さというのが、ある意味この本の最重要ポイントですね。
余談ですが、リフォームがビックビジネスというのはこちらの業界も同じかなと。 ただ、そのためには基礎工事が重要だし、本当のニーズをつかむ要求分析が必要なんですね。暗い・寒い→オープンキッチン　という変換ができるか、ということです。
もう一つ余談で、最後にコラムみたいなのがあって、トイレは昔は庭にあって土足で行くところだったのが、縁側の外れにできるようになったときに、日本人の足の裏はどうしたらよいのかと戸惑い、厠下駄というものができたという話があるのですが、縁側の外れのトイレというのがすごい懐かしい！子供のころ毎年夏休みを過ごした田舎の家はまさにそうでした。若い人は縁側すら分からなくなってきているのだと思いますが、もちもちの木とかで庭のトイレという雰囲気は分かるんですかね。（もちもちの木っつうのも懐かしいですよね）
モチモチの木 (創作絵本 6) 滝平 二郎 岩崎書店 1971-11
売り上げランキング : 4779 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4265908209/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;花さき山 (ものがたり絵本 20)&amp;quot; src=&amp;quot;https://i0.wp.com/images.amazon.com/images/P/4265908209.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4834001148/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;八郎 (日本傑作絵本シリーズ)&amp;quot; src=&amp;quot;https://i0.</description></item><item><title>楽天テクノロジーカンファレンス</title><link>https://jqinglong.github.io/programmers-office/%E6%A5%BD%E5%A4%A9%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/</link><pubDate>Sun, 30 Nov 2008 08:16:05 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%A5%BD%E5%A4%A9%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/</guid><description>生三木谷さん見てきました。金銀パールじゃなくて、金銀ルビー、司会のお姉さんいい仕事しました。
気を取り直しまして（笑）。
なんか自分やばいな。そっち方面もやばいけど、何か世の中についていけてない感満載。
せめてのメモ残し。
レコメンデーション 強調フィルタリングという方式と、コンテンツベースという方式がありますよ。Wikipediaもそんな説明。
協調フィルタリング – Wikipedia
こちらをみると、さらにルールベースとかベイジアンネットワークとか。
「あなたにおすすめの商品」のからくりとは？–ECサイトのレコメンド技術を考える（2）
商品情報から似た商品を推薦するのがコンテンツベース、これを買った人はこれも買ってますよが強調フィルタリング。
ワードカウント 分散処理（Hadoopなど）を学ぶ際のHelloWorldはワードカウントだそうです。
今、仕事でもWordのVBAでワードカウントしてますが（単に効率化としてだけですけどね）、先に知ってたらちょっと遊んでみるのも良かったかも。
クラスタ クラスタ方式の分類として、こちらはわかりやすいですね。
多様化する_クラスタ_方式
こういう言葉は簡単に使ってしまいがちなので、頭の中を分類して整理しておく必要性は高いと思います。
仮想化 仮想化方式としては、完全仮想化と疑似仮想化があり、前者の例としてはVMWare、後者の例としてはXen。もっともXenも完全仮想化対応もしているんですかね。完全仮想化のほうは、OSは仮想であることを意識しない。その分、エミュレーションのコストが大きいということのようです。
その他、楽天さん内部の活動として、コーディングラリーとか、ジャングル（会社内アプリサーバホスティングとでもいいますか）とか。最後の話で、ジャングルの名前を付けたのが三木谷社長というのが驚き。ボトムアップじゃないということか？まあ、会社資産を相当使うわけだから、完全ボトムアップは無理だけど。しかし言ってみれば、AKIBA LTという名前を社長がつけるみたいな、ある意味すごいなと。
懇親会も太っ腹でしたね。料理もおいしかったです。
—
そうこうしているうちに、忘年会か・・・</description></item><item><title>2009年手帳</title><link>https://jqinglong.github.io/programmers-office/2009%E5%B9%B4%E6%89%8B%E5%B8%B3/</link><pubDate>Wed, 26 Nov 2008 12:31:03 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/2009%E5%B9%B4%E6%89%8B%E5%B8%B3/</guid><description>今回はこれ。
http://shop.jmam.co.jp/diary/1198070_1377.html
2268 ペイジェムB6ウィークリー3(ネイビー)
 </description></item><item><title>デスマーチ</title><link>https://jqinglong.github.io/programmers-office/%E3%83%87%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%81/</link><pubDate>Mon, 03 Nov 2008 02:58:14 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%87%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%81/</guid><description>今さら？今だから？
デスマーチ 第2版 ソフトウエア開発プロジェクトはなぜ混乱するのか 松原 友夫 山浦 恒央 おすすめ平均 松原さんの翻訳なので読みました。
死ぬほど大変なITプロジェクトに入る前に
できるなら　プロジェクトが始まる前に読んで！
システム開発に携わる人必読
とにかく、面白い Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; けど、読み始めたら萎えそうになっていったん閉じました。キーワードはトリアージなんですね。 &amp;lt;/p&amp;gt;</description></item><item><title>Silverlight Toolkit</title><link>https://jqinglong.github.io/programmers-office/silverlight-toolkit/</link><pubDate>Sat, 01 Nov 2008 14:49:57 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/silverlight-toolkit/</guid><description>メモ
http://www.codeplex.com/Silverlight</description></item><item><title>フロンターレvsJEF</title><link>https://jqinglong.github.io/programmers-office/%E3%83%95%E3%83%AD%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%ACvsjef/</link><pubDate>Sun, 24 Aug 2008 14:23:31 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%95%E3%83%AD%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%ACvsjef/</guid><description>でもって、今日はフロンターレvsJEF。なんか常にグランドの向こうサイドで試合してたような気がしますが、たまにこちらでもいいプレーがありました。ナイターってこんなきれいなんですね。フクアリがきれいだからというのもあると思いますけど。写真はその雰囲気をまったく伝えられてませんが。
こんな遊んでていいんだっけ？いいんです。明日から頑張ります。</description></item><item><title>IT業界ミュージカル同好会</title><link>https://jqinglong.github.io/programmers-office/it%E6%A5%AD%E7%95%8C%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%AB%E3%83%AB%E5%90%8C%E5%A5%BD%E4%BC%9A/</link><pubDate>Sat, 23 Aug 2008 18:03:03 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/it%E6%A5%AD%E7%95%8C%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%B8%E3%82%AB%E3%83%AB%E5%90%8C%E5%A5%BD%E4%BC%9A/</guid><description>第一回観劇会 ミス・サイゴン
Miss Saigon ミュージカル(歌)本田美奈子
EMIミュージック・ジャパン 1993-05-19
売り上げランキング : 4803 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/B000000ORS/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Miss Saigon (Original 1989 London Cast)&amp;quot; src=&amp;quot;https://i2.wp.com/images.amazon.com/images/P/B000000ORS.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/B000H5U5S0/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Making of Miss Saigon&amp;quot; src=&amp;quot;https://i0.wp.com/images.amazon.com/images/P/B000H5U5S0.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/B00005GLED/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;ミス・サイゴン&amp;quot; src=&amp;quot;https://i2.wp.com/images.amazon.com/images/P/B00005GLED.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0000071KD/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;レ・ミゼラブル (赤)&amp;quot; src=&amp;quot;https://i0.wp.com/images.amazon.com/images/P/B0000071KD.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/B0014GUABS/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;WELCOME TO THE THEATER/井上芳雄ミュージカル・セレクション~(DVD付)&amp;quot; src=&amp;quot;https://i1.</description></item><item><title>Zoundry Raven</title><link>https://jqinglong.github.io/programmers-office/zoundry-raven/</link><pubDate>Sun, 17 Aug 2008 15:19:40 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/zoundry-raven/</guid><description>Zoundry Raven というブログライター。
http://www.moongift.jp/2008/08/zoundry_raven/
http://www.zoundryraven.com/index.html
LiveWriter以外で、直接画像を貼れるのはなかなかないのではないでしょうか。
良いかもしれません。</description></item><item><title>ASP.NET AJAX Control Toolkit</title><link>https://jqinglong.github.io/programmers-office/asp-net-ajax-control-toolkit/</link><pubDate>Sun, 17 Aug 2008 14:17:27 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/asp-net-ajax-control-toolkit/</guid><description>いまいち情報が充実しないASP.NET AJAX Control Toolkit。PopupControlでややはまり。
そもそも
http://www.asp.net/AJAX/AjaxControlToolkit/Samples/PopupControl/PopupControl.aspx
を見ても、DynamicControlID、DynamicServiceMethod、DynamicContextKeyの記述がないのはどういうこと？？
これらを使うと、DynamicContextKeyの値を使用してWebサービスを呼んで、戻り値をDynamicControlIDに指定したコントロールにセットして使用できるという優れもので、明細の中で使うような場合は必須なのですが。
こちら
http://aspnet.4guysfromrolla.com/demos/printPage.aspx?path=/articles/071107-1.aspx
にちょっと助けられましたが、やりながら出たエラーから見るに、DynamicControlIDに実質セットできるのは、Panelだけですかね？？こいつのInnerHtmlに値をセットしようとするようです。本当はテキストボックスのTextにセットして、それを使用してさらに処理したかったのですが、どうしようかな。</description></item><item><title>ハングルを読もう</title><link>https://jqinglong.github.io/programmers-office/%E3%83%8F%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%92%E8%AA%AD%E3%82%82%E3%81%86/</link><pubDate>Sun, 03 Aug 2008 12:30:43 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%8F%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%92%E8%AA%AD%E3%82%82%E3%81%86/</guid><description>これはお勧め！
となりの国の文字 ハングルを読もう (オリジナル入門シリーズ) 井藤 伸比古
おすすめ平均 各々の取り組み方次第で
わかりやすいです
ハングルの仕組みがよぉーくわかる優れ本
小学生でも理解できます
ハングルがとても身近になります Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 自分の中では、すっかり中国語ブームなのですが、清渓川の件もあるし、ソウルも行ってみたい。しかし、ハングルは何が何だか分からないから、一人で行って楽しめるんだろうかという気持ちもあったわけですが、これでちょっとだけ行けるんじゃないかという気持ちになりました。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; と、同時に、また本質とは関係ないですけど、&amp;lt;br /&amp;gt;・登場人物と悩みながら進む、「&amp;lt;a href=&amp;quot;http://blog.livedoor.jp/dankogai/archives/51089420.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;数学ガールメソッド&amp;lt;/a&amp;gt;」&amp;lt;br /&amp;gt;・僕（ら）にとってとても大切な仮説実証&amp;lt;br /&amp;gt;なども勉強になります。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; しかし夏休みは宮城で終わりかな・・・ &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.accesstrade.net/at/c.html?rk=0100157f0044mz&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;&amp;quot; src=&amp;quot;http://www.accesstrade.net/at/r.html?rk=0100157f0044mz&amp;quot; border=&amp;quot;0&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;</description></item><item><title>経済ってそういうことだったのか会議</title><link>https://jqinglong.github.io/programmers-office/%E7%B5%8C%E6%B8%88%E3%81%A3%E3%81%A6%E3%81%9D%E3%81%86%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B%E4%BC%9A%E8%AD%B0/</link><pubDate>Sat, 02 Aug 2008 16:33:28 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%B5%8C%E6%B8%88%E3%81%A3%E3%81%A6%E3%81%9D%E3%81%86%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B%E4%BC%9A%E8%AD%B0/</guid><description> 経済ってそういうことだったのか会議 (日経ビジネス人文庫) 佐藤 雅彦
おすすめ平均 経済初心者におすすめ
お金から見た経済初心者向けの世界観
なかなかの実力
佐藤氏の質問力＆イラストがいい！
振り返る小泉改革 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 中身も面白いですけど、面白い話ってこういうものなんだなと、変な感心もしてしまいます。あとがきにも書いてますが、ちょっと答えにくいような本質的な質問への竹中さんの態度も感心。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 天才佐藤ならではかと思いながら、でも目指したいなという発言があったので、ちょっと長いですけど、引用します。 &amp;lt;/p&amp;gt; &amp;lt;blockquote&amp;gt; &amp;lt;p&amp;gt; どの仕事にもたくさんの課題があるように、広告も一つのCMを作るのにいくつもの問題を抱えます。予算が少ない、期間はこのくらいまでに作ってくれとか、このお菓子の認知率を何十％以上にしたいとか、十五秒CMしか作れないとか、オンエア量はこのくらいだとか、オンエアもこのテレビ局しか使えないとか・・・いっぱいあるわけですよ。電通の営業なら営業の悩みがあるし、マーケにはマーケの悩みが、もういっぱいあるんです。だけど、「ちょっといい」くらいのアイデアだと、営業の悩みはちょっと解決できるけど、マーケの悩みは解決できないな、みたいなのがあるわけですね。&amp;lt;br /&amp;gt;ところが本当にすごいアイデアは、一気に全部解決しますね。あれ、すごいですね。「スコーン」のCMのアイデアは、いろんな立場の人の問題を一気に解決してしまいます。 &amp;lt;/p&amp;gt; &amp;lt;/blockquote&amp;gt;</description></item><item><title>テーブルヘッダ固定の件</title><link>https://jqinglong.github.io/programmers-office/%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%83%98%E3%83%83%E3%83%80%E5%9B%BA%E5%AE%9A%E3%81%AE%E4%BB%B6/</link><pubDate>Sat, 26 Jul 2008 14:10:29 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%83%98%E3%83%83%E3%83%80%E5%9B%BA%E5%AE%9A%E3%81%AE%E4%BB%B6/</guid><description>あ、ヘッダじゃなくてヘッダーになるんですかね。
要するに、ヘッダ部分を固定しておいて、ボディ部をスクロールさせるテーブルを作る方法。
qooxdooとか言ったばかりですけど、それだけをやるにはちょっとヘビーということで、下記を使ってみました。
http://webplicity.net/flexigrid/
本当に簡単です。一番簡単なパターンは
$(‘.flexme’).flexigrid();
だけです。高さ指定を加えるとこんな感じ。
さて、ASP.NETでやる場合、お勧めはListViewですが、最初
http://msdn.microsoft.com/ja-jp/library/system.web.ui.webcontrols.listview.layouttemplate.aspx
の例のように、Tableをrunat=”server”にしておいて、を使っていたら、を書いても消されてしまい、うまくいきませんでした。で、runat=”server”をやめて、&amp;lt;asp:PlaceHolder runat=”server” ID=”itemPlaceholder” /&amp;gt;という形にするとOK。下記参照。
http://msdn.microsoft.com/ja-jp/magazine/cc337898.aspx
久々の.NETネタでした。
そして関係ない広告。</description></item><item><title>予算の割り当て</title><link>https://jqinglong.github.io/programmers-office/%E4%BA%88%E7%AE%97%E3%81%AE%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6/</link><pubDate>Mon, 21 Jul 2008 13:58:17 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E4%BA%88%E7%AE%97%E3%81%AE%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6/</guid><description>ビジョナリー・カンパニー、読了。で、最後の方に出てきたこの話は面白いかも。
メルク社（って日本だとあまり分からないですね）では、研究開発の計画や管理のための手段として予算を使うことを否定する。予算を割り当てるのは個々の社員。チームのリーダは、さまざまな分野の社員を説得してチームに加わってもらう。これにより、すぐれたプロジェクトは資源をひきつけ、劣ったプロジェクトは淘汰される。
行けそうな気、しません？？
ビジョナリー・カンパニー ― 時代を超える生存の原則 James C. Collins Jerry I. Porras 山岡 洋一 おすすめ平均 永続的に成長する企業の実態に迫る、。
理念の順守と時計を作る人
優れた企業の要件に関する徹底的な研究の成果を平易に
永遠に継続する大企業とは？
大事にすべきは基本理念 Amazonで詳しく見るby G-Tools</description></item><item><title>AIRとqooxdooの手習い</title><link>https://jqinglong.github.io/programmers-office/air%E3%81%A8qooxdoo%E3%81%AE%E6%89%8B%E7%BF%92%E3%81%84/</link><pubDate>Sun, 20 Jul 2008 19:25:14 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/air%E3%81%A8qooxdoo%E3%81%AE%E6%89%8B%E7%BF%92%E3%81%84/</guid><description>Ext JS かっこいいんですけど、商用に厳しい？（GPL？）ということで、qooxdooを試してみる。
（このあたりも参考　http://journal.mycom.co.jp/news/2007/06/08/009/index.html）
qooxdooがどれくらいすごいかはこちらをどうぞ。
http://demo.qooxdoo.org/current/showcase/
で、AIRもちょっと気になっているので、単純にこのshowcaseを載せてみました。
http://homepage2.nifty.com/konnokiyotaka/air/qooxdoo-showcase.air
2MB以上あります。すみません。（拡張子zipになってしまう場合はairに変更してください）
で、これだけで行けるの？？って感じですけど、発行した.airファイルを置くだけですよね？ランタイム等は指示に従ってインストールしてください。しかし世の中すごいな～
AIRについては、（今現在、サーバの問題か何かで見えてませんけど、→見えるようになってます）こちらをどうぞ。
API で覚える Adobe AIR
—
全然余談ですが、昨日は中学の同級生の結婚式に参加。会社の人やら友人の所属する剣道の会の先輩やらみんなが「ほっとした」「安心した」と。もし自分も式を挙げるようなことになったらそんな感じなんだろうな・・・。2時間苦笑いみたいな・・・。</description></item><item><title>千円札さえ拾わない人がいるのだから</title><link>https://jqinglong.github.io/programmers-office/%E5%8D%83%E5%86%86%E6%9C%AD%E3%81%95%E3%81%88%E6%8B%BE%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%BA%E3%81%8C%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A0%E3%81%8B%E3%82%89/</link><pubDate>Sun, 20 Jul 2008 16:41:40 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%8D%83%E5%86%86%E6%9C%AD%E3%81%95%E3%81%88%E6%8B%BE%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%BA%E3%81%8C%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A0%E3%81%8B%E3%82%89/</guid><description>1円の意味が分からない人もいるかもね（笑）
http://manabekawori.cocolog-nifty.com/blog/2008/07/post_f90d.html
  千円札は拾うな。 安田 佳生
おすすめ平均 グッときた本
タイトルに惹かれて
自分でできることは自分でしない
タイトル買いしましたが‥‥
成長とは自分を捨てる勇気 Amazonで詳しく見るby G-Tools</description></item><item><title>発信力</title><link>https://jqinglong.github.io/programmers-office/%E7%99%BA%E4%BF%A1%E5%8A%9B/</link><pubDate>Sat, 19 Jul 2008 13:47:14 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%99%BA%E4%BF%A1%E5%8A%9B/</guid><description>たまたま発信力について書こうと思ってたら、フローチャートについて盛り上がってるところがありますね。
フローチャートだけじゃないです。形にして発信してくれればよいのに、それをしないで、「昔はこうだった」みたいなことしか言わないから、ついて行く気がしないのですよ。発信力がなさすぎです。そして発信力が強い方に流れる。表現としてしょぼいかどうかの問題ではない気がする。同じしょぼさの代替物に流れているだけだと思うので。そして一から作りなおしちゃうから、善し悪しが出てくる。やはり改善だと思う。一から作らない。悪いところを改善する。少なくとも前よりは確実に良いものにする。</description></item><item><title>なんでもやってみて、手直しして、試してみる</title><link>https://jqinglong.github.io/programmers-office/%E3%81%AA%E3%82%93%E3%81%A7%E3%82%82%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%80%81%E6%89%8B%E7%9B%B4%E3%81%97%E3%81%97%E3%81%A6%E3%80%81%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</link><pubDate>Sun, 13 Jul 2008 15:49:42 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%81%AA%E3%82%93%E3%81%A7%E3%82%82%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%80%81%E6%89%8B%E7%9B%B4%E3%81%97%E3%81%97%E3%81%A6%E3%80%81%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</guid><description>By 3M from ビジョナリー・カンパニー
ビジョナリー・カンパニー ― 時代を超える生存の原則 James C. Collins Jerry I. Porras 山岡 洋一 日経BP社 1995-09
売り上げランキング : 496 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4822242633/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;ビジョナリー・カンパニー 2 - 飛躍の法則&amp;quot; src=&amp;quot;https://i1.wp.com/images.amazon.com/images/P/4822242633.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4822245241/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;ビジョナリーカンパニー【特別編】&amp;quot; src=&amp;quot;https://i1.wp.com/images.amazon.com/images/P/4822245241.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4478300593/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;プロフェッショナルの条件―いかに成果をあげ、成長するか (はじめて読むドラッカー (自己実現編))&amp;quot; src=&amp;quot;https://i0.wp.com/images.amazon.com/images/P/4478300593.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4862761003/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;ビジョナリー・ピープル&amp;quot; src=&amp;quot;https://i1.wp.com/images.amazon.com/images/P/4862761003.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.</description></item><item><title>EXT JS</title><link>https://jqinglong.github.io/programmers-office/ext-js/</link><pubDate>Sat, 05 Jul 2008 16:35:41 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/ext-js/</guid><description>EXT JSを使って、ちょっと見た目を整えてみました。
http://klabs.appspot.com/
けど、いまいち使いこなせてない感がありあり。ってIEだとエラーになっている。また、せっかくこういうレイアウトを提供してくれてるのに、ページ遷移をどうしたらよいか分からず、IFRAMEで逃げてます。もっと違う方法を想定していると思うのですが。
しかも、FireFoxでIFRAMEの高さを100%にする方法が分からない。ということでsafariかわいいよ、という.NETerらしからぬ結論。
 
（全然関係ないですけど、BLUE MANはちょっと見たい）</description></item><item><title>Smalltalk Webアプリフレームワーク　Seaside</title><link>https://jqinglong.github.io/programmers-office/smalltalk-web%E3%82%A2%E3%83%97%E3%83%AA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%80%80seaside/</link><pubDate>Sat, 05 Jul 2008 07:55:03 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/smalltalk-web%E3%82%A2%E3%83%97%E3%83%AA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%80%80seaside/</guid><description>Seaside へ GO!!
これはなかなか面白そうですね！
今からいろいろな「ことば」に触れておくのも良いかも。</description></item><item><title>時間管理</title><link>https://jqinglong.github.io/programmers-office/%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 05 Jul 2008 07:33:50 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/</guid><description>順番前後しますが、時間管理に関しては、Webマガジンとして継続されているエンジニアマインドで、時間管理の連載があります。
タイム・マネジメントの心得　～あなたを多忙から開放する10の方法～
Webサイトは
革新的生産スケジューリング入門
ぜひ合わせて読みたいですね。
  時間管理術 (日経文庫)佐藤 知一
by G-Tools</description></item><item><title>コラボレーション</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%83%A9%E3%83%9C%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/</link><pubDate>Sat, 05 Jul 2008 07:20:17 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%83%A9%E3%83%9C%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/</guid><description>昨日はAKIBA LT vol.10。ご参加・発表の皆様、ありがとうございました。
色々なコラボレーションを見ることができました。
月曜日から期待したいのが2年目の盛り上がり。ずいぶん長いこと話しこんでいたと思いますが、他社の同期が触媒となって自分たちのつながりを強めて、外とのつながりも広げていく。良いきっかけになったのではないでしょうか。ぜひ8.29はKOSUGI-LTに行きましょう。9.4-5のカイゼンフェスタもね。
マナスリンク野口さん、EM ZEROありがとうございました。
もらった皆さん、ぜひこちらからでもフィードバックを！！
AKIBA LT次回は10.3。もう少しいろいろ準備したいですね。</description></item><item><title>本当にごめんなさい</title><link>https://jqinglong.github.io/programmers-office/%E6%9C%AC%E5%BD%93%E3%81%AB%E3%81%94%E3%82%81%E3%82%93%E3%81%AA%E3%81%95%E3%81%84/</link><pubDate>Wed, 02 Jul 2008 16:21:39 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%9C%AC%E5%BD%93%E3%81%AB%E3%81%94%E3%82%81%E3%82%93%E3%81%AA%E3%81%95%E3%81%84/</guid><description>結局さっき帰ってました。時間管理がなってない。
そして、明後日（というかもう明日）のAKIBA LTの資料作成。今さらウェブ進化論を読んでますが（思っていたより全然面白いです）、マスコラボレーションとしてのオープンソースという話が出てきましたので、そんな話を。
  ウェブ進化論 本当の大変化はこれから始まる (ちくま新書) 梅田 望夫
おすすめ平均 ビジネスの将来の一片を示唆する
世の中が変わる
ウェブのライトユーザーが読みました
批判精神を欠いた大人
「あちら側」の世界のガイドブック Amazonで詳しく見るby G-Tools</description></item><item><title>App Engine でのモデル定義</title><link>https://jqinglong.github.io/programmers-office/app-engine-%E3%81%A7%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E5%AE%9A%E7%BE%A9/</link><pubDate>Sun, 29 Jun 2008 16:10:33 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/app-engine-%E3%81%A7%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E5%AE%9A%E7%BE%A9/</guid><description>Google App Engineでは、データストアとして、よくあるDBではなく独自のDBを使い、テーブル定義をしなくても、db.Modelというクラスを作れば、簡単にデータを保存できます。
http://code.google.com/intl/ja/appengine/docs/datastore/overview.html
で、確かに、ちょっとしたものを作る分にはそれでよいと思うのですが、きっと中の人は何かツール使ってると思うんですよね。データ定義がコード内にしかないのは、ちょっとどうよと思うわけです。その辺のテーブルデザインツールが使えないというのもちょっとなと。例えば、カラム（App Engine的にはプロパティ）の型に何が使えるかを、リファレンスを見ないと分からないわけです。
ということで、App EngineとPythonの練習を兼ねて、ちょっとしたツールを。
http://klabs.appspot.com/
全ての型を入れていないし、順番入れ替えも、そもそも削除もできないってどういうことよ、ってな感じですが、これから遊びながらいろいろ付け足したいと思います。</description></item><item><title>Aptanaはんぱねー</title><link>https://jqinglong.github.io/programmers-office/aptana%E3%81%AF%E3%82%93%E3%81%B1%E3%81%AD%E3%83%BC/</link><pubDate>Sun, 22 Jun 2008 08:39:40 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/aptana%E3%81%AF%E3%82%93%E3%81%B1%E3%81%AD%E3%83%BC/</guid><description>色々ふらつきながら、Aptana入れました。
単にHTMLエディタとしての期待だったのですが、どちらかというとAjax関連に力を入れているようですね。新規プロジェクトを作ろうとすると、途中でこんな画面が出てきます。
うは、名前すら聞いたことがないものもある。かと思うとMicrosoft Ajaxなんてものまで入っている。はんぱないっすね。
こちらのシリーズが役に立ちそう。
http://www.atmarkit.co.jp/fwcr/rensai/ajaxrecipe01/ajaxrecipe01_1.html
—</description></item><item><title>戦後日本最大のコンペ</title><link>https://jqinglong.github.io/programmers-office/%E6%88%A6%E5%BE%8C%E6%97%A5%E6%9C%AC%E6%9C%80%E5%A4%A7%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9A/</link><pubDate>Sun, 22 Jun 2008 00:51:32 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%88%A6%E5%BE%8C%E6%97%A5%E6%9C%AC%E6%9C%80%E5%A4%A7%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%9A/</guid><description>
磯崎新の「都庁」―戦後日本最大のコンペ 平松 剛
文藝春秋 2008-06
売り上げランキング : 1048 おすすめ平均 権力者とアナーキスト
新宿の都庁を通していろんなことがわかる本 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 最近日曜の新聞の書評は割とよく目を通しますが、今日はこれ。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 人間ドラマ的な内容も面白そうですけど、やはりその世界の仕組みが面白そう。&amp;lt;br /&amp;gt;たとえば、都庁の設計が最終的には丹下健三になったというは昔から僕も知っていて、&amp;lt;a href=&amp;quot;http://ja.wikipedia.org/wiki/%E6%9D%B1%E4%BA%AC%E9%83%BD%E5%BA%81%E8%88%8E&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wikipedia&amp;lt;/a&amp;gt;にも載ってます。&amp;lt;br /&amp;gt;しかし、実際に建てたのは誰かというとよく分からなくて、例えば&amp;lt;a href=&amp;quot;http://www.kajima.co.jp/tech/office/ex/ex7_00/index2.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;鹿島&amp;lt;/a&amp;gt;とか&amp;lt;a href=&amp;quot;http://www.shimz.co.jp/tw/works/01office/20.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;清水&amp;lt;/a&amp;gt;とか入ってるみたいですけど、本当はもっといろいろ入っているような気がする。設計が重要で、実際の施工は重要ではない？&amp;lt;br /&amp;gt;けど最近だと、例えば赤坂サカスとかミッドタウンは三井不動産が作ったんだね、というのは分かるけど、設計をやっているわけではなくプロジェクト管理ということで、設計がどこかというのはあまり出てこない。&amp;lt;br /&amp;gt;あるいは昔家庭教師をやっていたところのお父さんが竹中工務店の人で、俺が作った、ということで&amp;lt;a href=&amp;quot;http://ja.wikipedia.org/wiki/%E3%81%A1%E3%82%83%E3%82%84%E3%81%BE%E3%81%A1%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%82%BA&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ホテル阪急インターナショナル&amp;lt;/a&amp;gt;に連れて行ってもらったことがありますが、こちらは設計も施工も竹中で、確かに「俺」が作ったんだなという感じ。&amp;lt;br /&amp;gt;設計においては、個人（と言っても丹下事務所とか磯崎事務所は大所帯だとは思いますが）事務所も大手デベロッパーも並列で、大手は設計だけやることもあるし全部やることもあるし。そんな中で、誇りを持って俺が作ったと言える構造とか、興味深いです。 &amp;lt;/p&amp;gt;</description></item><item><title>こみゅぷらす Community Launch 2008</title><link>https://jqinglong.github.io/programmers-office/%E3%81%93%E3%81%BF%E3%82%85%E3%81%B7%E3%82%89%E3%81%99-community-launch-2008/</link><pubDate>Sun, 15 Jun 2008 14:59:28 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%81%93%E3%81%BF%E3%82%85%E3%81%B7%E3%82%89%E3%81%99-community-launch-2008/</guid><description>
午前中フットサルに行っていて大幅に遅れました。すみません・・・
飲みながら、テクニカルな話を聞いたり、他人のコーディング姿を見る、最高ですね！
お話しさせていただいた内容から。
・テストしやすいコード設計はまだまだ必要
・Source AnalysisのVB版が出るかは全く分からないし、実際はなかなかルール作りも難しいとすると、まずはコードメトリクスというのも検討するか
・新人さんが、1年間ひたすらテストばかりをやらされるというのはやはりつらそう。でもよいテスト仕様が書ける技術は絶対必要なのでがんばってください。
はじめて学ぶソフトウェアのテスト技法宗 雅彦 by G-Tools</description></item><item><title>有償稼働率</title><link>https://jqinglong.github.io/programmers-office/%E6%9C%89%E5%84%9F%E7%A8%BC%E5%83%8D%E7%8E%87/</link><pubDate>Sun, 15 Jun 2008 06:41:29 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%9C%89%E5%84%9F%E7%A8%BC%E5%83%8D%E7%8E%87/</guid><description>うちの言葉では直接率。
SIをやるのは正社員の終身雇用を守るため?
SIの現場にいればわかるけど、いつも案件があるわけではないから、有償稼動していない時間というのは存在する。その有償稼動していない時間は、企業的にはできるだけ減らしたい。正社員をいっぱい抱えると、どうしても有償稼動していない時間が増える。だから、案件の状況によって変わる部分を下請けでカバーするという構造。
大きな仕事をやる分にはまだどこかにお願いすればカバーしてもらえるからいいですけど、2週間とか1カ月とかの仕事でいちいちよそにお願いしてられないです。そんな状況で、直接率をたとえば90％にキープしようとすると、90%に達するまでは仕事を受け入れ続け、緊急の割り込み仕事（商談支援・見積などが典型）が入ると、その個人は簡単にオーバーフローします。それでいながら、原価管理をプロジェクト単位で行いますので、他人に頼むオーバヘッドが大きいと判断すれば、かりにその人の直接率が低くても仕事を依頼するとは限りません。（不機嫌な職場ってまだ読んでませんが、こんなこと書いてますかね？？）
プロジェクトのコストを考えるときに、人件費中心で考えるのはやめられないですかね。仕事が少なくても人件費はかかるんです。と同時に、人間はいろいろな目的に使うことができるんです。自分たちの開発はそんなに完璧ですか？次の開発のためにやっておくべきことなんて山ほどありますよね？プロジェクトごとの原価管理なんてやってないで、個人も組織もレベルアップに時間を使わないと。それをやって自分たちがアウトプットするものの価値を高めていかないと、目先の直接率を上げたところで、総崩れですって。
単価ではなくて、自分たちが提供するものの価値を上げる。価値って言うと抽象的になってしまいますが、価値の一つの例はリリースまでの時間。今3ヶ月で提供しているものを3週間で提供できるようになれば、それは提供できるものの価値が大きく上がっています。そこまで来れば、直接率という概念で考えて40%くらいでも成り立つんじゃないかな、とこれは根拠レスですが。
大丈夫、そうなっても雇用危機にはなりません。「間接時間」でやるべきことはまだまだあります。これをやっておけば次の仕事は1年かかっていたものが1か月でできるようになる、ということであれば、そこに人を投入すべきです。
夢物語ではないと思っているんですけどね・・・
（まとめ）
・SIerの価値は、様々なSIを経験することによりアウトプットの価値を高めるところにある
・原価管理、特に人件費の管理を変えることにより、アウトプットの価値を向上させるための活動を充実させよう
・そのためにはまだまだこの業界、人は足りないはず
  不機嫌な職場~なぜ社員同士で協力できないのか (講談社現代新書 1926) 河合 太介
おすすめ平均 よりよいコミュニケーション環境を目指して
第5章、最終章がポイント
共感はしたけれど
本の主張には賛同できるが&amp;#8230;
協力体制構築のヒントあり Amazonで詳しく見るby G-Tools</description></item><item><title>原価の分からない製造業があるのだろうか</title><link>https://jqinglong.github.io/programmers-office/%E5%8E%9F%E4%BE%A1%E3%81%AE%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E8%A3%BD%E9%80%A0%E6%A5%AD%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AE%E3%81%A0%E3%82%8D%E3%81%86%E3%81%8B/</link><pubDate>Fri, 13 Jun 2008 20:55:12 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%8E%9F%E4%BE%A1%E3%81%AE%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E8%A3%BD%E9%80%A0%E6%A5%AD%E3%81%8C%E3%81%82%E3%82%8B%E3%81%AE%E3%81%A0%E3%82%8D%E3%81%86%E3%81%8B/</guid><description>http://itpro.nikkeibp.co.jp/article/COLUMN/20080528/304481/
どなたが書いていたのか忘れてしまったのですが、ソフトウェア開発の原価は作業工数だけですか？
測りやすいものだけを測ってないですか？ライトの下だけを探してないですか？</description></item><item><title>続App Engine</title><link>https://jqinglong.github.io/programmers-office/%E7%B6%9Aapp-engine/</link><pubDate>Thu, 12 Jun 2008 13:23:58 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%B6%9Aapp-engine/</guid><description>http://typecast.typepad.jp/t/typecast/30321/232075/23583278/list_comments
などを参考に、otherで認証成功。
softbankerはれっつごー！</description></item><item><title>ドラッカーの泥へのスタンス</title><link>https://jqinglong.github.io/programmers-office/%E3%83%89%E3%83%A9%E3%83%83%E3%82%AB%E3%83%BC%E3%81%AE%E6%B3%A5%E3%81%B8%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9/</link><pubDate>Sun, 01 Jun 2008 13:08:22 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%89%E3%83%A9%E3%83%83%E3%82%AB%E3%83%BC%E3%81%AE%E6%B3%A5%E3%81%B8%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9/</guid><description>今さら参戦する気もないですけど、読み終わったので。
テクノロジストの条件 (はじめて読むドラッカー (技術編)) 上田 惇生 おすすめ平均 ぜひ読んで！
7000年後の課題にいかに対応するのか。
トホホ、ペーペーの及ぶところでは、なかったです
異色の切り口と感じました
MOTの原点 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; やはりテイラーの話になります。&amp;lt;br /&amp;gt;テイラーは熟練なるものは存在しないと断言しました。それまでは技術は長年の修行によって熟練させるものでした。それをテイラーは、すべての仕事は分析可能とし、方法に従って仕事をすれば誰でも第一級の賃金を得られるようになるとしました。&amp;lt;br /&amp;gt;「生産」において生産性が向上したのは、別に機械のおかげではなく、知識を適用したからということです。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; で。まず「生産」なのかという問題があります。そしてそれ以上に重要な問題が、知識を適用できているのかということです。さらに、適用しているつもりで硬直化させていないかということもあります。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 苦労は必要だと思いますけど、それは未来への投資としての苦労ですよね。ある意味気持ちの持ちようでもあるんですけど。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 最後のインタビューでの情報論もちょっと面白かったです。今のところ、情報のほとんどは組織やグループの内部のことについてのものだと。一番大事な市場や経営環境や技術変化についての情報は未整備のままであると。&amp;lt;br /&amp;gt;しかし、2005年のインタビューの割にはちょっと古いような気もします。今は外の情報と中の情報が完全に分離してしまっているような気がします。どうしても中の情報が必要な時は、頑張って探しますが、しかし、基本的には何かを知りたいときは、まずGoogle。なぜなら中の情報は探しにくいから。だから知的作業の生産性が上がらないのではないかな。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;amp;#8212;&amp;lt;br /&amp;gt;&amp;lt;a href=&amp;quot;http://www.accesstrade.net/at/c.html?rk=0100382v0044mz&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;ビジネス＋Bamboo パソコンに思いを書きとめよう。&amp;quot; src=&amp;quot;http://www.accesstrade.net/at/r.html?rk=0100382v0044mz&amp;quot; border=&amp;quot;0&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;</description></item><item><title>Google App Engine SMS認証問題</title><link>https://jqinglong.github.io/programmers-office/google-app-engine-sms%E8%AA%8D%E8%A8%BC%E5%95%8F%E9%A1%8C/</link><pubDate>Sun, 01 Jun 2008 00:26:56 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/google-app-engine-sms%E8%AA%8D%E8%A8%BC%E5%95%8F%E9%A1%8C/</guid><description>喜び勇んで登録しようとするも
Verify Your Account by SMS
ページで認証エラー問題に引っかかる。
料金徴収につなげるためにこんな認証にしたんでしょうかね。</description></item><item><title>Light and Shade</title><link>https://jqinglong.github.io/programmers-office/light-and-shade/</link><pubDate>Mon, 26 May 2008 16:23:39 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/light-and-shade/</guid><description>実行委員として立候補しながら本当の意味で何もせず、当日も懇親会のみ参加という暴挙。
にもかかわらず温かく迎えて頂きありがとうございました。
正味時間と標準時間のお話とか、7日単位のイテレーションで移動平均とか、短時間で濃いお話を聞くことができ、感謝感激です。6.6に向けても頑張りますよ。
さて、今回思ったのが、「みんな悩んでる」。いろいろ活動していても、実はみんな悩んでるんだな・・・いや、逆だ！
みんな悩んでいても、明るく活動している！
人それぞれ悩みはあるでしょう。けど僕みたいに頭が真っ白になってじめじめしていたら周りにまで不幸を広めてしまうだけ。
影があるなら光がある。なくすものさえない今がチャンス。Light and Shade!</description></item><item><title>自動テストのコスト</title><link>https://jqinglong.github.io/programmers-office/%E8%87%AA%E5%8B%95%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E3%82%B3%E3%82%B9%E3%83%88/</link><pubDate>Sun, 25 May 2008 01:23:53 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E8%87%AA%E5%8B%95%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E3%82%B3%E3%82%B9%E3%83%88/</guid><description>なぜ従来のテスト自動化ツールはアジャイルを抑えつけるのか
やはりメンテナンス問題。思わぬところでノーマークなプロジェクトが赤くなって時間を取られるか放置してしまうかということも正直あります。
で思うに、あとで取り返せるからという理由でコストを掛けるのは無理がある。あとからもコストはかかるので借金だけが残る。なので今回で回収できるくらいで考える。
最近やっているのは、テストデータの作成を、SQLとして考えて、それを残す。SQLのメンテナンスは多くの人ができる。自動まで行かなくても、繰り返し実行ができる。検証も可能。手間は変わらないので借金を残さない。
画面入力は、本当に何度も繰り返すところはスクリプトを作る。自分でメンテナンスできる形のスクリプト。これも1日に10回×30項目くらい入力するならすぐに回収できますからね。画面変わってもすぐ直せる。
こんな考えだから大きな投資ができないのか。そこはちょっと別の問題として考えたい。投資の計画とは何か。ヒントは20%ルールみたいな話とか。</description></item><item><title>.NETでのDIコンテナ</title><link>https://jqinglong.github.io/programmers-office/net%E3%81%A7%E3%81%AEdi%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A/</link><pubDate>Sun, 25 May 2008 00:09:04 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/net%E3%81%A7%E3%81%AEdi%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A/</guid><description>Unity Application Block
が、出てますよ、という記事。
http://www.infoq.com/jp/news/2008/04/microsoft-unity
で、その中で「Scott Hanselman氏は.NETのDIコンテナプロジェクトについてリスト化を始めています。」ということでリンクされているのがこちら。
http://www.hanselman.com/blog/ListOfNETDependencyInjectionContainersIOC.aspx
こういう時にSeasarが入ってこないのはさびしいですね。English Pageもあるのに。
（追記）入ってました。かるあさんありがとうございます～
で昨日はSeasar Conでしたか（過去形）。
ビデオ見ましょうか。
http://event.seasarfoundation.org/sc2008spring/Streaming
（ちょっと重いですよね・・・）</description></item><item><title>App Engine 開発環境</title><link>https://jqinglong.github.io/programmers-office/app-engine-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/</link><pubDate>Sat, 24 May 2008 16:01:53 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/app-engine-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/</guid><description>まだ招待してもらえませんが、ぼちぼちたくらみ開始。
統合開発環境（IDE） まずここから。
PyScripter
SPE IDE
Pydev
それぞれの紹介記事として、
Python開発統合環境の決定版！
Python のスレッドについての資料と Python の統合開発環境 (IDE) – 傀儡師の館
Fomalhaut of Piscis Australis : [ python ] Eclipse に PyDev をインストールする
など。
ぱっと見は、PyScripterがよいような気がする。きっとRubyにおけるRDE。しかし、ここはあえてPyDevにしてみます。macでもやるかもしれないので（たぶんやらないけど）、Delphiというのがやや残念。
Python Python は普通に最新の2.5.2
Eclipse PyDevを使うということは、Eclipse。起動してみると3.2でしたが、どうやら世間の皆さんは3.3.xのようです。特に使ってるわけでもないので、前に入れたものを最新版に入れ替えようと思ったのですが、All-In-One Eclipseは3.2.0ベースとのことで、しかもリンク先の様子がおかしい。ということで、今回はAmaterasIDE Installerにしてみます。
起動したら、PyDevの設定。
Fomalhaut of Piscis Australis : [ python ] Eclipse に PyDev をインストールする
ITmedia エンタープライズ：Eclipse＋PyDEV＝Python統合開発環境
などを参考。
App Engine
さらにApp Engine環境としてSDK。
http://code.google.com/appengine/downloads.html
最初の一歩 まずはこちらを参考に、超基本から。
http://builder.japan.zdnet.com/sp/google-app-engine/story/0,3800086196,20371257-2,00.htm
と言いつつ、いきなり
socket.error: (10013, ‘Permission denied’)
というエラーではまりましたが、IISでポート8080を使ってしまっていたからでした。そちらを止めると無事画面表示ができました。
ちなみに、下記WARNINGは気にしなくてよいようです。
WARNING 2008-05-24 13:01:01,667 datastore_file_stub.</description></item><item><title>看美女</title><link>https://jqinglong.github.io/programmers-office/%E7%9C%8B%E7%BE%8E%E5%A5%B3/</link><pubDate>Sat, 24 May 2008 02:54:43 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%9C%8B%E7%BE%8E%E5%A5%B3/</guid><description>昨日の帰り際、Oくんに軽く中国語を教えてもらいながら、自分のGoogleReaderに登録してある
http://www.cnblogs.com/beginner/
を眺めていたら、技術系ブログ集には異色な「看美女想到的」なる文字が。
内容は、美女をを見ると、心臓がバクバクし、脳があれこれ考えだすのは、オブザーバパタンみたいだね、ということの実装で、たわいもないといえばたわいもないのですが、タイトルに惹かれて翌日実行までしてみた自分が一番たわいないです。
パターンの説明はやはりこれが一番分かりやすい♪
http://www.hyuki.com/dp/cat_Observer.html
–広告–</description></item><item><title>広告</title><link>https://jqinglong.github.io/programmers-office/%E5%BA%83%E5%91%8A/</link><pubDate>Sun, 18 May 2008 13:25:31 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%BA%83%E5%91%8A/</guid><description>ドラッカー、もう少しです。
テクノロジストの条件 (はじめて読むドラッカー (技術編))
P.F.ドラッカー 上田 惇生
イノベーションを生み出す7つの機会の一つとして、ニーズの存在があるという話の中で、マスコミ（新聞）を生み出したのは、大量印刷のための自動植字機と広告であるという話がありました。広告という社会的イノベーション。
IT・情報システムに対するコストの許容性とは、本当のところはどの辺なのか。
1システムウン百万円・ウン千万円は、全然OKなのか、それとも1業務十万円なのか、あるいは会計ソフト5万円・1万円の世界なのか。それとも、広告付き0円なのか。
業務システムでも広告付き、ありじゃないですかね。まあ、大企業とかだとそれ以上のこともできると思いますけど、あとはまさに企業家精神を持ちうるか・やるか、という問題ですね。
【ということで広告（の広告みたいな）】
&amp;lt;img alt=&amp;ldquo;あなたのホームページ・メルマガで広告収入！&amp;rdquo;　【アクセストレード】 src=&amp;ldquo;http://www.accesstrade.net/at/r.html?rk=010002mh0044mz&amp;quot; border=0&amp;gt;</description></item><item><title>INETA Day 2008</title><link>https://jqinglong.github.io/programmers-office/ineta-day-2008/</link><pubDate>Sat, 17 May 2008 13:37:11 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/ineta-day-2008/</guid><description>会社のYくんと参加。社内ブログで募って一人だけというのはややさびしいですが。
http://www.ineta.jp/tabid/173/Default.aspx
小島さんはさすがです。ナベアツそこまでやりますか。自分のナベアツが思いっきり手続き指向だという再認識。手続的－宣言的－図解的という視点（特に図解的をこう並べるというところ）も、当たり前のようでいて新鮮。
懇親会のコミュニティ紹介も面白かったです。
松崎さんも、話を聞くのは2回目でしたが、やはり面白かったです。ロードテストはもっと使うべきですね。
SQL Server 2008情報も盛りだくさん。
みんな来るべきだったよ～</description></item><item><title>MoneyLook</title><link>https://jqinglong.github.io/programmers-office/moneylook/</link><pubDate>Thu, 15 May 2008 15:33:20 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/moneylook/</guid><description>大分時間がたってしまいましたが、とりあえずMoneyLookはたまに眺めてます。
ゆうちょも昔の定期貯金が自分でも訳分からなくなってるのでちゃんと管理したいのですが、そこまでが面倒なんですよね・・・。
ところで、上のバナーはアフィリエイトですが、無料ツールの広告に金を出して、それでも儲かっちゃうというのがすごいなと思います。確かに、ログインすると色々な金融関係の広告が表示されますけど。</description></item><item><title>ドラッカーによる原価計算改善案</title><link>https://jqinglong.github.io/programmers-office/%E3%83%89%E3%83%A9%E3%83%83%E3%82%AB%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E5%8E%9F%E4%BE%A1%E8%A8%88%E7%AE%97%E6%94%B9%E5%96%84%E6%A1%88/</link><pubDate>Sun, 11 May 2008 13:26:59 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%89%E3%83%A9%E3%83%83%E3%82%AB%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E5%8E%9F%E4%BE%A1%E8%A8%88%E7%AE%97%E6%94%B9%E5%96%84%E6%A1%88/</guid><description>ドラッカー、さすが、ここに触れてくれるとは。でも、なんでもっとこの辺を頑張ってくれなかったのだろう。
現行原価計算の問題を4つの欠陥として挙げています。
ぶっちゃけて言えば、直接の労働費、どんだけよ。単価いくらか知らないけど、給与として払っている以外は、単にその他経費を直接労働に比例させているだけでしょ。通常のオーダ外のことをしているときのコストはどうなってるのよ。
そんな問題意識です。
で、その解決法として、時間ごとの固定費というものを出してきます。ちょっと分かりにくいです。が、要するに変動費でないものを変動費としてとらえていることによるいびつさが問題なのだと思います。材料を増やせばものがたくさんできるからそれは変動費でしょう。しかし、知的生産においてはテーマは品質です。時間をかければ比例して品質が上がるか。よい機械を使えば比例して品質が上がるか。上がらないなら変動費ではないでしょ。
ここの考えを変えることで、人間も変わってくると思うんですけどね～
テクノロジストの条件 (はじめて読むドラッカー (技術編))P.F.ドラッカー 上田 惇生 by G-Tools</description></item><item><title>TAMACHI.LT</title><link>https://jqinglong.github.io/programmers-office/tamachi-lt/</link><pubDate>Sun, 11 May 2008 12:35:09 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/tamachi-lt/</guid><description>行きたかった！DDDで頑張ったのに！悔しいですっ！！（By　ザブングル）
昨日はTDD（停電ドリブン開発）。これは結構効きますね。トリンプの、時間で電気を消す作戦の効果が想像できます。</description></item><item><title>知識労働の生産性</title><link>https://jqinglong.github.io/programmers-office/%E7%9F%A5%E8%AD%98%E5%8A%B4%E5%83%8D%E3%81%AE%E7%94%9F%E7%94%A3%E6%80%A7/</link><pubDate>Tue, 06 May 2008 09:33:02 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%9F%A5%E8%AD%98%E5%8A%B4%E5%83%8D%E3%81%AE%E7%94%9F%E7%94%A3%E6%80%A7/</guid><description>だてにドラッカーではないですね。濃いです。
テイラー以前は、生産性の向上は技術と道具によってもたらされるものであり、労働については、より激しく働くか長く働くかしかなかった。
しかし、テイラーは肉体労働の生産性を向上させた。その手法は
1.仕事を個々の動作に分解する
2.各動作に要する時間を記録する
3.無駄な動作を探す
4.不可欠な動作を短い時間で簡単に行えるようにする
5.各動作に必要な道具を作りなおす
これは、成果が大きいだけでなく憎まれもしたので、いろいろな名前の手法が現れたが、日本のカイゼン含めて、この手法が使われている。
では知識労働の生産性はどうか。
まず、肉体労働において質は制約であるのに対し、知識労働においては本質である。教師の仕事は生徒の数で評価されるのではなく、生徒が本当に学んだかどうかによる。
しかし、仕事の質が何かを定義するのは難しい。なぜなら、そもそも仕事が何かを明らかにすることすら難しいから。
なお、知識労働者は知識労働にのみ携わるわけではない。知識労働と肉体労働の両方を行うのであり、そのような人達を、テクノロジストと呼ぶ。
・・・こんな話ですが、私たちもテクノロジストだったんですね。これは当たり前のようですけど、ちょっと新しい視点でした。
そして、肉体労働についてはテイラーの手法を適用できるわけです。適用しているわけです。
仕事が何かの定義が難しいのもまさにそのとおり。例として、看護師が、仕事を患者の看護とする人と医師の補助とする人がいるが、少なくともいわゆる「雑用」が生産性を阻害しているという点では一致して、それを取り除くことによりよい効果が出たという話があります。しかし、現実には、このレベルさえ、場面場面ですり替えられるわけです。すなわち、ある時は、患者の満足度を向上させろ、ある時は、医師の満足度を向上させろ、ある時は、雑用も自分の仕事を向上させるために必要な立派な仕事だ・・・。
結局、本質部分での生産性向上を見せてあげないと、雑用からすら逃れられないんですよね。そしてその生産性を質で測るとすると、結局は顧客満足度の向上だったりするから、テクノロジスト自身では見せてあげにくい、ということかなぁ。
・・・と一瞬逃げたくなりましたが、第一に、いきなり質で生産性を評価しようとする人は（良かれ悪しかれ）あまりいない。既存の枠組みに従えばよいと考えれば、いろいろ手はある。
第二に、そもそも、材料なくして提案は無理。あとの方でドラッカーも書いてますが、日本で提案制度が成功したのは、その導入がSQC確立の後だったからとのこと。もちろん、知識労働におけるSQCとは、というところは努力が必要ですが、諦めて嘆いても仕方がないということかと。
—
今日は天気がよかったので、無駄に下総中山まで出かけて、こんなことを考えていました。明日から仕事ダァー</description></item><item><title>個人事業主向け会計ソフト</title><link>https://jqinglong.github.io/programmers-office/%E5%80%8B%E4%BA%BA%E4%BA%8B%E6%A5%AD%E4%B8%BB%E5%90%91%E3%81%91%E4%BC%9A%E8%A8%88%E3%82%BD%E3%83%95%E3%83%88/</link><pubDate>Mon, 05 May 2008 12:20:35 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%80%8B%E4%BA%BA%E4%BA%8B%E6%A5%AD%E4%B8%BB%E5%90%91%E3%81%91%E4%BC%9A%E8%A8%88%E3%82%BD%E3%83%95%E3%83%88/</guid><description>いつの間にか金がなくなっている、というのもいかげんにしなくては。
家計簿・資産管理ソフトとして、思いつくのはMicrosoft Money。
http://www.microsoft.com/japan/money/deluxe/lineup.mspx
同等かな？家計簿ではないな、資産管理だけだね、という無料のこちらも面白そう。
家計簿、資産管理に便利 – moneylook.net
が、ふと思い立って、個人事業主向け会計ソフトを使ってみるのはどうかな、と。
青色申告ソフト_やよいの青色申告 08
わくわく青色申告2
http://www.roy.hi-ho.ne.jp/nyao/support/kkai/index.htm
この値段だもんな～、切なくなるなぁ。
で、やっぱり面倒かなということで、とりあえずMoneyLookだけインストールしました。
で、最近のソニー銀行は登録できましたが、昔から使っているUFJ（というか三和銀行）とかみずほ（というか第一勧銀）とかは店舗統廃合でわけわからん！ゆうちょ銀行はPDF印刷して書けって！！
お金ってなかなか面倒ですね・・・</description></item><item><title>アプリケーションの国際化　その3</title><link>https://jqinglong.github.io/programmers-office/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%9B%BD%E9%9A%9B%E5%8C%96%E3%80%80%E3%81%9D%E3%81%AE3/</link><pubDate>Sun, 04 May 2008 14:59:06 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%9B%BD%E9%9A%9B%E5%8C%96%E3%80%80%E3%81%9D%E3%81%AE3/</guid><description>コードビハインドでのリソース取得もちょっと探し回りましたが、こちら。
方法 : プログラムでリソース値を取得する
厳密な型指定が可能というのは強力ですが、それはグローバルリソースだけと。
でも、画面表示以外はグローバルで良いような気がするので、OK。ファイル（クラス）はいくらでも作れるので、分類分けもできるし。
つか、本当にメッセージファイルはこっちにしようよ。
また、現在のカルチャはSystem.Threading.Thread.CurrentThread.CurrentCulture.Nameで取得できましたので、これで条件分岐で処理を変更する等も可能です（文字列比較になってしまうのがちょっとだけ残念ですが仕方ないっすね）。
こちらも参考。
http://msdn.microsoft.com/ja-jp/library/bz9tc508(VS.80).aspx
だいぶいい感じになってきました。
あとはデータの持ち方ですな。</description></item><item><title>生産プロセスの進化</title><link>https://jqinglong.github.io/programmers-office/%E7%94%9F%E7%94%A3%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E9%80%B2%E5%8C%96/</link><pubDate>Sun, 04 May 2008 07:48:28 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%94%9F%E7%94%A3%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E9%80%B2%E5%8C%96/</guid><description>ドラッカーを読むのは初めてだと思いますが、現在「テクノロジストの条件」をゆっくり読んでいるところです。
テクノロジストの条件 (はじめて読むドラッカー (技術編)) P.F.ドラッカー 上田 惇生 おすすめ平均 ぜひ読んで！
7000年後の課題にいかに対応するのか。
トホホ、ペーペーの及ぶところでは、なかったです
異色の切り口と感じました
MOTの原点 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; まだ最初のほうですが、こんな言葉がありました。&amp;lt;br /&amp;gt;「製造から組み立てへの生産プロセスの進化」 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; この文脈では、製造とは職人による一つ一つの手作りのイメージです。それが組み立てに変わることを「進化」と表現しています。&amp;lt;br /&amp;gt;私たちの業界も、何かとこの意味での「進化」を目指しているように思いますし、それへの反発もあったりすると思います。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; もっともこの言葉は、以下のような流れの中で述べられたものです。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; テイラー以前は、「仕事」は研究対象ではなく、仕事は所与のものとされ、技術と道具が研究されてきた。しかし、テイラーは科学的管理法において、技術と道具を所与のものとして仕事を経済的・体系的・効率的に行うための手法を論じた。それだけのことで、ほとんど直ちに道具・工程・製品の発展が見られた。その一つが上記の生産プロセスの進化。さらに、人間工学・産業心理学・産業生理学といった仕事の研究からも、技術と道具の変化が生まれようとしている。そして、技術・道具・工程の再設計をもたらしつつある。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 思うに、組み立てればよいものを手作りしていたら進歩はしない。それは仕事の仕方としてそう。手書きしているものをいかに生成するかを考えるということが仕事の仕方を考えるということ。&amp;lt;br /&amp;gt;しかし、今後は人間的な側面から技術の変化も起きるし、仕事のやり方も変化する。例えば、間違えやすい作り方をしておいて間違えを防ぐ努力をするのではなく、間違えようのない作り方をすべき。&amp;lt;br /&amp;gt;そしてこれは生産プロセスについてであり、デザインについてではないということ。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; そんな感じです。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; @MARUNOUCHI CAFE &amp;lt;/p&amp;gt;</description></item><item><title>アプリケーションの国際化　その2</title><link>https://jqinglong.github.io/programmers-office/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%9B%BD%E9%9A%9B%E5%8C%96%E3%80%80%E3%81%9D%E3%81%AE2/</link><pubDate>Tue, 29 Apr 2008 04:18:21 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%9B%BD%E9%9A%9B%E5%8C%96%E3%80%80%E3%81%9D%E3%81%AE2/</guid><description>何事もやってみないと分からないもので、やってみるからこそ感動も生まれるわけで。
ごく基本的なグローバライズに関しては、ASP.NETの支援はやはりすごいです。鼻血出るかと思いました。
最初はちょっと苦労しました。サブフォルダにaspxを配置したら、App_LocalResourcesファイルはそのサブフォルダに作成する必要があるんですね。まあ、それはよいでしょう。
ASP.NETでリソースを使ってみるなどを参考にさせていただきましたが、画面に表示させるラベル文字をリソースから読み込むようにする方法としては二つあります。
&amp;lt;asp:Label ID=”LabelName1″ runat=”server” Text=”名前” meta:resourcekey=”Label1Resource1″&amp;gt;&amp;lt;/asp:Label&amp;gt;
&amp;lt;asp:Label ID=”LabelName2″ runat=”server” Text=”&amp;lt;%$ Resources:LabelName2.Text %&amp;gt;”&amp;gt;&amp;lt;/asp:Label&amp;gt;
一つはText属性とは別にmeta:resourcekeyを設定する方法、こちらはデザイナのプロパティを見ると「プロパティは暗黙的に式にバインドされています」と表示されます。
もう一つはText属性に対して、リソースの名前を指定する方法。こちらは「プロパティは式バインドされています」と表示されます。
どちらの方式でも、デザイナ画面で値を表示することができます。上の方式だとText属性の値が表示されますし、下の方式だとリソースの値が表示されます。
ちなみに、ここは結構重要だと思ってます。例えば
http://www.ibm.com/developerworks/jp/opensource/library/os-php-intl/index.html
のリスト 8. に「」という形で嫌な書き方の片鱗が見えますが、これがずらりと並んだHTMLを直すのは正直勘弁と思ってしまいますので。 （メッセージファイルのIDによる呼び出しとかも本当は勘弁・・・）
で、どちらにするかという話になるわけですが、
方法 : ASP.NET Web サイトに対してリソース ファイルを作成する (Visual Studio)
に「ASP.NET Web ページからローカル リソース ファイルを生成するには」という記述があります。
[ツール] メニューの [ローカル リソースの生成] をクリックします。
これだけです。
これでそのサブフォルダにApp_LocalResourcesを作ってくれて、リソースファイルを作ってくれて、aspxの各項目にmeta:resourcekey=”xxx”を埋め込んでくれて、リソースファイルの値に現状のText等に設定されている値を埋め込んでくれるのです。
何を言っているかというと、何も考えずに普通に作った既存のaspxが1ページあたり10秒そこそこでグローバライズされるということです。あとは、そのリソースファイルを必要な言語分コピーしてローカライズすればよいということです。
鼻血出ますよね？？
もっとも、この方法による生成は、既存リソースファイルを上書きしてしまうので、ちゃんと日本語ページなり英語ページなりを作ってから一発で生成するということにはなります（もちろんその後の手修正は可能ですが、何事も二重メンテナンスということは避けたいものです）。
ということで画面はこれで良いのではないでしょうか。次はメッセージ？（コードでのロケール判断・リソース読み込み）</description></item><item><title>アプリケーションの国際化</title><link>https://jqinglong.github.io/programmers-office/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%9B%BD%E9%9A%9B%E5%8C%96/</link><pubDate>Sun, 27 Apr 2008 04:39:54 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%9B%BD%E9%9A%9B%E5%8C%96/</guid><description>と気軽に言うわけですけど。
どんなことを考えなければいけないのでしょうか。
Webアプリケーションを、日本・中国・アメリカで使うとします。
1.画面に表示される文字、メッセージを日中英切り替えられる
例：「住所を40文字以内で入力してください」「Please enter the address …」「…」
2.データが日中英で登録・表示される
例1：「千葉県船橋市」「… Funabashi-shi,Chiba pref.」「」
例2：「円」「yen」「」
3.データ表示範囲が切り替えられる
例1：日本で使う場合は日本の顧客、中国で使う場合は中国の顧客が検索される
例2：日本では「g、kg…」、アメリカでは「pound、…」
4.項目表示の有無が切り替わる
例：アメリカでのみ社会保険番号を表示する
というのがパッと思いつく内容です。
昔読んだ本を引っ張り出してきて復習しておきましょうか。
国際化と日本語処理―CAFE BABE Javaプログラミング・ノート (UNIX MAGAZINE LIBRARY) 風間 一洋 おすすめ平均 国際化の困難性をJAVAでどうクリアするか
Javaによる真の国際化プログラミングのために
入門者には不向き
入門書ではないので注意
Java の文字コードの理解に役立つ Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;amp;nbsp; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; この辺も参考に。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.atmarkit.co.jp/fdotnet/asp2review/asp2review09/asp2review09_02.html&amp;quot;&amp;gt;＠IT：ASP.NET 2.0が変えるWebアプリ開発の世界　第9回 ASP.NET 2.0が変えるWebアプリ開発の世界&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://wildcat.cocolog-nifty.com/web/2006/08/aspnet_part2_b46c.html&amp;quot;&amp;gt;やまねこのWebメモ: ASP.NETでページの多言語化 Part2&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; ただ、ほとんど1.</description></item><item><title>夢をかなえるゾウ</title><link>https://jqinglong.github.io/programmers-office/%E5%A4%A2%E3%82%92%E3%81%8B%E3%81%AA%E3%81%88%E3%82%8B%E3%82%BE%E3%82%A6/</link><pubDate>Sun, 20 Apr 2008 12:35:26 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%A4%A2%E3%82%92%E3%81%8B%E3%81%AA%E3%81%88%E3%82%8B%E3%82%BE%E3%82%A6/</guid><description>久しぶりに、ふつうの町の本屋さんで本を買った気がする。
夢をかなえるゾウ 水野敬也 おすすめ平均 夢をかなえるゾウ
成功者に共通する習慣 これはお勧めです！
あっという間に
いっきに読んでもうたがな〜ほんまやで。 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;amp;nbsp; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 帰りに早速、靴磨き用のブラシ買うてもうた。 &amp;lt;/p&amp;gt;</description></item><item><title>原価</title><link>https://jqinglong.github.io/programmers-office/%E5%8E%9F%E4%BE%A1/</link><pubDate>Sun, 13 Apr 2008 12:14:10 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%8E%9F%E4%BE%A1/</guid><description> 御社のトヨタ生産方式は、なぜ、うまくいかないのか? ~偽りの「かんばん」~ 若井 吉樹 おすすめ平均 よい参考書、実態を指摘されている点がおもしろかった。
最適ツール
初めて興味深く読めました
製造現場に必要な基本的知識を網羅した1冊
トヨタ生産方式でどんな注意が必要かを示す貴重1冊！ Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 「トヨタ式といっても、そう簡単ではないですよね。なぜならこういう問題があるからです」という観点から書かれており、面白いし、内容も分かりやすいです。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 個人的には、その中でも大きいのは、やはり原価計算の問題。本書では、在庫を増やした方が利益が上がる、として取り上げられています。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 純製造業はいったん置くとしても、アプリケーション開発を製造業式に加工費として原価計算して個々のプロジェクトに見積もりから原価管理までさせるのは、部分最適から全体最適に移れない最大の原因ではないかと思うのです（そもそも製造業で、製造者が見積もりと原価管理をやることってあるのでしょうか？）。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 計画に基づいて製造するか、必要に応じて製造するか、という問題もそうです。必要性が変わったら計画しなおすんだから同じだよ、というのは建前としては間違ってないと思いますが、そこに発想の転換がなければ単なるごまかしです。そこまで微調整が可能な計画になっているか、計画書式になっているか、ということです。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 重要度も緊急度も低いかもしれないけど、タスクは山ほどあるはずです。しかし、計画と原価管理の方式が理由となって、手つかずのまま放置されている。そんなことはないでしょうか？ &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; ただ、この問題にどう踏み込んでいったらよいか、分からないんだな・・・。 &amp;lt;/p&amp;gt;</description></item><item><title>さおだけ屋</title><link>https://jqinglong.github.io/programmers-office/%E3%81%95%E3%81%8A%E3%81%A0%E3%81%91%E5%B1%8B/</link><pubDate>Sun, 30 Mar 2008 03:39:35 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%81%95%E3%81%8A%E3%81%A0%E3%81%91%E5%B1%8B/</guid><description>昨日は行き帰りの電車でさおだけ屋。
さおだけ屋はなぜ潰れないのか? 身近な疑問からはじめる会計学 (光文社新書) 山田 真哉 おすすめ平均 会計の推理小説
いい！
一つ納得できない点が．．．
会計士がどうゆう発想でどのようなスタンスで仕事をしているか分かる本
良書としか言いようがない Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; さおだけ屋も面白いけど、フランス料理屋の話とか、自然食品店の話もなかなかですね。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 一点、異業種交流会よりも身近な人との深い関係を、という話があります。確かに薄っぺらい関係をいくら広げても役立たないかもしれないけど、その中に光るものが見つけられることもあるので、ちょっと反対（まあ、私の場合は異業種までは行かず、同業種交流会レベルですが）。&amp;lt;br /&amp;gt;苦しい時に、そうして出会った人からのちょっとしたメールに癒されることもあるのです。&amp;lt;br /&amp;gt;外に出よう！ &amp;lt;/p&amp;gt;</description></item><item><title>コスト</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%82%B9%E3%83%88/</link><pubDate>Sun, 23 Mar 2008 14:22:44 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%82%B9%E3%83%88/</guid><description>休みに寝てばかりもさすがにまずかろう、ということで散歩中にブックオフ。
スタバではグランデを買え! ―価格と生活の経済学 吉本 佳生 おすすめ平均 スタバではグランデを買え
モノゴトは裏からもみてみよう
ケチな人に読んでほしいかも、
ケーススタディではありませんが。
タイトル買い Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 価格はコストによって決まる、でもそこでいうコストは「いわゆるコスト」（原価・人件費など）以外にいろいろあるよね、というお話（単純化しすぎ）。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; それに対して、ぼくらは労働集約産業といわれてしまう状況通り、いわゆるコスト、特に人件費のかたまりだね、と一瞬思ったのですが、本当か？&amp;lt;br /&amp;gt;給料を時給換算で考えた金額と顧客に請求する単金は全然違うわけで、そこにはいわゆるコスト以外のコストがいろいろ入っているわけですね。&amp;lt;br /&amp;gt;だから（ってつながらないと思いますけど僕の中ではつながっている）、やはり直接率を上げようという話はだめなんじゃないかと思う。スタバで、バイトがみんな直接率100％近くて、注文さばききれないから残業します、ってありえない。そうならない仕組みをちゃんと作らないと。 &amp;lt;/p&amp;gt;</description></item><item><title>生綿アメ、あるいはフルーツスパゲティ</title><link>https://jqinglong.github.io/programmers-office/%E7%94%9F%E7%B6%BF%E3%82%A2%E3%83%A1%E3%80%81%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF%E3%83%95%E3%83%AB%E3%83%BC%E3%83%84%E3%82%B9%E3%83%91%E3%82%B2%E3%83%86%E3%82%A3/</link><pubDate>Sun, 23 Mar 2008 03:23:21 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%94%9F%E7%B6%BF%E3%82%A2%E3%83%A1%E3%80%81%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF%E3%83%95%E3%83%AB%E3%83%BC%E3%83%84%E3%82%B9%E3%83%91%E3%82%B2%E3%83%86%E3%82%A3/</guid><description>この夢、どこから来たんだ？？ということありますよね・・・
スーパーで買い物していると目にとまった「生綿アメ　コーラ味」。
帰って皿にあけると、水気のない白滝のような、あるいは伸びきったスパゲティのようなものの塊。それに昔の粉ジュースそのものの粉末コーラをかけると真っ赤に染まる。周りの人たちは「くいものじゃねぇ」とか言ってますが、ゲテモノ耐性の強い僕は気にせず食べると、「う、意外とうまい」。隣の子に無理やり食べさせると、複雑な顔をした後、「あ、いけるね。」「でしょ、なんて言うか、フルーツスパゲティって感じだよね。」
フルーツスパゲティでググると、ヒットはしますけど、そんなもんじゃないですよ。粉ジュースが手に入らない方は、ふつうにコーラにスパゲティを入れて食べてもよいのではないかと思いますので、お試しあれ（私はやりませんが）。
綿アメといえば屋台。ふと、屋台って、ビジネスの原点的なところがあるのでは、なんて。競合等も考慮した上で、商品を選択。お客のリクエストに応えて、素早く提供。そのための下準備。価格・売上を予測して仕入。
—
すみません、脳みそ腐敗気味です・・・</description></item><item><title>イノベーションのジレンマ</title><link>https://jqinglong.github.io/programmers-office/%E3%82%A4%E3%83%8E%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B8%E3%83%AC%E3%83%B3%E3%83%9E/</link><pubDate>Sun, 09 Mar 2008 12:34:32 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%A4%E3%83%8E%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B8%E3%83%AC%E3%83%B3%E3%83%9E/</guid><description> イノベーションのジレンマ―技術革新が巨大企業を滅ぼすとき (Harvard business school press) クレイトン・クリステンセン おすすめ平均 破壊的イノベーションについての名著
破壊的イノベーションには感動！
優良企業、優秀な経営者は技術革新に滅ぼされる？
チャレンジャーの為の名著だと思う
大企業は本当に破壊的イノベーションを活かせないのか？ Amazonで詳しく見るby G-Tools &amp;lt;h4&amp;gt; カンタム &amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt; いきなり余談・・・。本書の題材の中心はHDDメーカーなのですが、その中でカンタムの名前が何度か出てきて、妙に懐かしい。&amp;lt;br /&amp;gt;入社前に割引でパソコンを買ったのですが、当時はWindows95が出たてのほやほや。まずは壁紙を花見にしてマインスイーパーをしますよね。でもすぐに&amp;lt;a href=&amp;quot;http://www.amazon.co.jp/gp/redirect.html%3FASIN=4756130151%26tag=konnokiyotaka-22%26lcode=xm2%26cID=2025%26ccmID=165953%26location=/o/ASIN/4756130151%253FSubscriptionId=0G91FPYVW6ZGWBH4Y9G2&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Run Run Linux &amp;lt;/a&amp;gt;を買ってインストールしました（ってこの本まだ売ってるのかい！！）。情報処理試験なるものを受けたほうがよいのかな、C言語を勉強しないといけないんだ、LinuxなんかのUnix系だと無料で環境が入っているらしい、という短絡思考です。&amp;lt;br /&amp;gt;で、Linux入れるのはなかなか容易でなく、HDDも自分でちゃんとメーカー・型番まで分かって選ばないといけないんですよね。というわけで、&amp;lt;b&amp;gt;QUANTUM&amp;lt;/b&amp;gt;が脳裏に残っているわけです。 &amp;lt;/p&amp;gt; &amp;lt;h4&amp;gt; 技術 &amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt; 前半で「技術」の定義付けがあって、それをインプットからアウトプットを生み出すプロセスとしてとらえています。さらに後半ではプロセスとリソースを区分けしていて、リソースは交換可能だが、プロセスはその組織に根付いている（だから、コンサルティング会社などは激しく人が入れ替わるが組織としての価値を保ち続けている）。&amp;lt;br /&amp;gt;似た話だと思いますが、組織の能力とその組織で働く人材の能力の区分けもされていて、組織としての能力はプロセスと価値基準だと。&amp;lt;br /&amp;gt;プロセス改善という言葉をちょっと軽く使っていたなと思います。単に改善ではなくプロセス改善。その組織が持つ技術の向上。 &amp;lt;/p&amp;gt; &amp;lt;h4&amp;gt; Excel &amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt; では破壊的技術はどこから生まれるのよ、という時に一番分かりやすかったのがExcel。機能で言えば、市場の需要を大幅に超えてしまっているわけで、下から侵食するチャンスだという話。Googleやら何やらあるわけですが、ただ、ファイルの流通という問題があるからそう簡単にはいかない。しかし、危険な臭いはしますよね。 &amp;lt;/p&amp;gt; &amp;lt;h4&amp;gt; 「存在しない市場は分析しえない。破壊的技術の用途となる市場は、開発の時点では単に分からないのではなく、知り得ない。」 &amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt; この表現は何かに近いぞ。そしてそれに対処するための方法として本書が勧めるのが、小規模な組織が小さな失敗と小さな成功を繰り返して学習を重ねること。近い！ &amp;lt;/p&amp;gt;</description></item><item><title>ヘルプは人のためならず</title><link>https://jqinglong.github.io/programmers-office/%E3%83%98%E3%83%AB%E3%83%97%E3%81%AF%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AA%E3%82%89%E3%81%9A/</link><pubDate>Sun, 02 Mar 2008 12:56:26 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%98%E3%83%AB%E3%83%97%E3%81%AF%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AA%E3%82%89%E3%81%9A/</guid><description>私たち（？）ヘルプとかマニュアルとか書くの、あまりうまくないですよね。
けど、「相手の身になって考えてみろ」「運用を考えろ」みたいな言葉にちょっと反抗期。
ただ、それらはちゃんと書くことによって、仕様を深く考えることに貢献するし、テストのレベルも上がると思うし、メンテのときにも役立つし、要するに自分にちゃんと返ってくるんじゃないかなという独り言。</description></item><item><title>Origo</title><link>https://jqinglong.github.io/programmers-office/origo/</link><pubDate>Sun, 24 Feb 2008 13:19:33 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/origo/</guid><description>色々作るのも、最近は忙しい＋モチベーションが上がらなかったのですが、そういうときは外に出るべし、ということで、ちょっと調べてみました。
オープンソースにするのはライセンスとかももう少しちゃんと勉強しないと怖いので徐々にという感じですが、それでも外にソース置場がほしいなと。
CodeReposはまだちょっと度胸ないし、他も決め手がないなという中で、決め手があったのがOrigo。
http://www.origo.ethz.ch/wiki/origo
何が決め手かというとVisualStudio用プラグインが用意されているということ。
ところが、それに関しては、私の環境が元々ちょっとおかしくて、うまく動いてくれませんでしたという落ち。まあいいです。
全般的には、wikiベースでちょっとその手のものへの慣れは必要かなという印象。
トラッキング（Issues）に関しては、レポートのフォーマットが下記のように書かれていてよい感じ（って普通そういうものですか？Tracとか使ったことないので）。
What steps will reproduce the problem?
What is the expected output? What do you see instead?
What version of the product are you using? On what operating system?
Please provide any additional information below:
また、レポートの分類（bugとかenhancementとか）が決められておらず、一瞬どうかと思いましたが、Tagsがあるので、そこに書けばよさそうです。むしろそれはいいかも。
バージョン管理はsvnです。まだつないでませんが。どっちみちソース管理するならこういうところを使うことを考えておくのもよいなと思いました。その意味で、Origoは、オープンソースだけでなく、クローズソースも歓迎されているのもポイントかも。
（参考）
ソフトウェア開発ホスティングWeb APIクライアント「Origo API Client」
（作ってみたプロジェクト）
http://eventmanager.origo.ethz.ch/</description></item><item><title>Better Google Reader</title><link>https://jqinglong.github.io/programmers-office/better-google-reader/</link><pubDate>Sun, 24 Feb 2008 05:18:27 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/better-google-reader/</guid><description>グリモン第二弾。
MOONGIFT:Google Readerを便利に「Better Google Reader」
Preview buttonがよさげです。</description></item><item><title>発生原因と流出原因</title><link>https://jqinglong.github.io/programmers-office/%E7%99%BA%E7%94%9F%E5%8E%9F%E5%9B%A0%E3%81%A8%E6%B5%81%E5%87%BA%E5%8E%9F%E5%9B%A0/</link><pubDate>Sat, 23 Feb 2008 13:51:11 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%99%BA%E7%94%9F%E5%8E%9F%E5%9B%A0%E3%81%A8%E6%B5%81%E5%87%BA%E5%8E%9F%E5%9B%A0/</guid><description>ナベアツを書いているときに14でアホになってしまうという現象が起きて、ちょっと悩みました。原因は
ret = IIf(((i mod 3) = 0) Or (Instr(CStr(i),”3″) &amp;gt; 0),ToAho(CStr(i)),CStr(i))
と書くべきところを
ret = IIf(((i mod 3) = 0) Or (Instr(ret,”3″) &amp;gt; 0),ToAho(CStr(i)),CStr(i))
と書いていたからです。これだと14がアホになる他、30番台のいくつかではアホにならないという障害になります。テストで気づいたからよかったのですが、仮に10までしかテストしていなかったら気付かなかった可能性があります。ヒヤリハットみたいなものなので、仮に10までしかテストしなくて障害を起こしてしまったとして（あるいはテストしたけど気づかなかったとして）、二度とこのような問題を起こさないように根本原因を解消しておきたいと思います。
根本原因を探る際に、なぜなぜ5回というのがありますが、なぜなぜを「なぜ発生させてしまったか（なぜそのような記述をしてしまったか）」と「なぜ流出してしまったのか（なぜテストで防げなかったのか）」という観点があるというのが面白かったので、そんな感じでやってみます。
一つの参考として：「なぜなぜ分析」手法 実践セミナー 「なぜなぜ分析」手法 実践セミナー（PDF）
なぜ発生させてしまったか
(1)Dimで初期化されると思い込んでいた
(2)思い込みのため初期化しなかった（現状もしていない！危険！）
(3)最初は「3の倍数のとき」という条件のみで記述して、後から「3のつく数字のとき」という条件を追加したが、その際当初のToAhoメソッドで使っていたInstr(ret,…という記述をコピペした
(4)CStr(i)は変数に入れてから使おうかと一瞬思ったが、まあこの程度はいいかと思った（現状もそうだ！）
なぜ流出してしまったか
(1)10までテストすれば十分だと思った
(2)14は3の倍数だと勘違いした
(3)OKボタンを連打して確認したので、期待値と異なる値になっていることを見逃した
発生させないための対策
(1)宣言の直後に必ず初期化する
(2)宣言と同時に初期化できないVB Scriptは使用しない
(3)宣言に対応する初期化があるかを機械的にチェックする
(4)関数の入れ子が複雑になるような場合は戻り値をいったん変数に入れてから引数として渡す
(5)前後関係等に依存する値は裸で使わずいったん変数に入れてから引数として渡す
(6)各ステップ毎に期待する動作になっていることを確認しながら記述する
(7)誤りの再利用を避けるためすぐに対策を取っておく
流出させないための対策
(1)どこまでテストすれば品質が保証されるかを、テスト仕様を決める際に論理的に導き出す
(2)原則として考えられる全パターンをテストする。例外的にリソース上の問題等で全パターンテストができないときは、論理的に絞り込みを行う
(3)テスト仕様を作成する際にはInとOutをデータとして準備する
こんなことを考えてみると、いろいろ感じることがあります。
・発生させないための対策の方がコストが小さそう
・もっとも、発生させないための対策(5)は言うほど簡単ではない
・発生させないための対策の方が適用範囲が広そう
・流出させないための対策の方が「ちゃんと対策をとりました」と言いやすそう
・対策の中には、発生対策の(2)のように、いろいろな理由で取りえないものもある
・「必ず」のような精神論的対策は実際は無意味（今回もさらすにあたって結構気は使っているのにこの有様）
・論理的絞り込みは結構難しそう（現在のロジックは2桁までの仕様ですが、では3桁に対応しようとした際にテスト範囲を論理的に決めうるかはなかなか難しいような気がする）。それよりも、徹底的な自動化で全パターンやってしまう方が良いような気がする。</description></item><item><title>ナベアツ</title><link>https://jqinglong.github.io/programmers-office/%E3%83%8A%E3%83%99%E3%82%A2%E3%83%84/</link><pubDate>Sat, 23 Feb 2008 07:20:24 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%8A%E3%83%99%E3%82%A2%E3%83%84/</guid><description>床屋の時間を待ちながら、1000speakersを見ながら、漫画喫茶でナベアツ。
なんてすてきな休日・・・
nabeatsu.vbs
—
MsgBox "3の倍数と3のつく数字のときにアホになり、5の倍数のときに犬っぽくなります。（40までいくよ）" Dim i For i = 1 To 40 Dim ret ret = IIf(((i mod 3) = 0) Or (Instr(CStr(i),"3") 0),ToAho(CStr(i)),CStr(i)) ret = IIf((i mod 5) = 0,AddDog(ret),ret) MsgBox(ret) Next Function ToAho(str) Dim ret ret = str If Len(ret) = 2 Then ret = Left(ret,1) &amp; "じゅう" &amp; Right(ret,1) ret = Replace(ret,"1じゅう","じゅう") End If ret = Replace(ret,"1","いてぃ") ret = Replace(ret,"2","にぃ") ret = Replace(ret,"3","しゃん") ret = Replace(ret,"</description></item><item><title>ITpro Expo より　ワークフローまとめ</title><link>https://jqinglong.github.io/programmers-office/itpro-expo-%E3%82%88%E3%82%8A%E3%80%80%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%BE%E3%81%A8%E3%82%81/</link><pubDate>Sun, 17 Feb 2008 13:53:03 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/itpro-expo-%E3%82%88%E3%82%8A%E3%80%80%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%BE%E3%81%A8%E3%82%81/</guid><description>デブサミも行けず、ITpro Expoっていつの話だよ、という感じですが、資料を放っておいても邪魔なので、整理。
そんな中から「ワークフロー」というキーワードを掲げている製品をまとめ。
サイボウズ ワークフロー for ガルーン 2
****X-point – ウェブフォーム・ワークフロー “エクスポイント”
desknet’s
MajorFlow for.NET
パソコン決裁DocGear</description></item><item><title>からすみを炙る</title><link>https://jqinglong.github.io/programmers-office/%E3%81%8B%E3%82%89%E3%81%99%E3%81%BF%E3%82%92%E7%82%99%E3%82%8B/</link><pubDate>Sun, 17 Feb 2008 12:51:44 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%81%8B%E3%82%89%E3%81%99%E3%81%BF%E3%82%92%E7%82%99%E3%82%8B/</guid><description>からすみを　炙って食べると　異様にうまい
ライターであぶってもいいんですよ。</description></item><item><title>AutoPagerize　インストールしてみましたよ</title><link>https://jqinglong.github.io/programmers-office/autopagerize%E3%80%80%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F%E3%82%88/</link><pubDate>Mon, 04 Feb 2008 15:36:25 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/autopagerize%E3%80%80%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F%E3%82%88/</guid><description>tpircsさんに背中を押され、入れてみました。
Webブラウジングを快適にするAutoPagerize
を参考。
ちょっとキモイ感じがいい感じ♪</description></item><item><title>SQLメモ　仕訳</title><link>https://jqinglong.github.io/programmers-office/sql%E3%83%A1%E3%83%A2%E3%80%80%E4%BB%95%E8%A8%B3/</link><pubDate>Sun, 03 Feb 2008 01:47:43 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/sql%E3%83%A1%E3%83%A2%E3%80%80%E4%BB%95%E8%A8%B3/</guid><description>こんな表から
 こんな出力を得たい
 借方・貸方を横に並べて、借方だけある場合は貸方NULL、貸方だけある場合は借方NULL、みたいな感じ。
—
SELECT
借方仕訳.伝票番号
, 借方仕訳.行番号
, 借方仕訳.科目 AS 借方科目
, 借方仕訳.金額 AS 借方金額
, 貸方仕訳.科目 AS 貸方科目
, 貸方仕訳.金額 AS 貸方金額
FROM
(
SELECT
伝票番号
, 行番号
, 科目
, 金額
FROM
仕訳サンプル
WHERE
貸借区分 = ‘借’
) AS 借方仕訳
LEFT OUTER JOIN (
SELECT
伝票番号
, 行番号
, 科目
, 金額
FROM
仕訳サンプル WHERE
貸借区分 = ‘貸’
) AS 貸方仕訳
ON 借方仕訳.伝票番号 = 貸方仕訳.伝票番号</description></item><item><title>KOSUGI-LT</title><link>https://jqinglong.github.io/programmers-office/kosugi-lt/</link><pubDate>Sat, 02 Feb 2008 16:13:28 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/kosugi-lt/</guid><description>懇親会でKOSUGIで検索してもヒットしないなんて話題が出てましたがちゃんと出ますね！
さて、昨日、じゃなくて一昨日になってしまいましたが、KOSUGI-LTにお邪魔してきました。
若い人たちの運営がさわやかでした。
さらに驚きの参加者約50人。発表者10人もすごかったです。
みなさん発表がうまいし、ネタも多様でためになることも多かったですが、そんな中から2点。
仕掛けを責める（攻める） なんで人を責めてしまうんだろう、というのがこの半年くらいの切実な悩みなのですが、この言葉を聞いて、ふと、「何を責めたらよいのか分からないのでは」という考えが。けどそんな考え自体が人を責めてる気もするし、やはり重たいテーマ・・・
Greasemonkey 基本IEなので、スルー気味だったのですが、クライアントストレージという方面からのお話にちょっと惹かれました。それについては別稿で。デモが見られなかったのが残念。AKIBA復活の際にはぜひ来てほしい！</description></item><item><title>システム開発現場のファシリテーション ~メンバーを活かす最強のチームづくり~</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%96%8B%E7%99%BA%E7%8F%BE%E5%A0%B4%E3%81%AE%E3%83%95%E3%82%A1%E3%82%B7%E3%83%AA%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC/</link><pubDate>Sun, 27 Jan 2008 15:34:14 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%96%8B%E7%99%BA%E7%8F%BE%E5%A0%B4%E3%81%AE%E3%83%95%E3%82%A1%E3%82%B7%E3%83%AA%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3-%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC/</guid><description>みんな買いましょう！
システム開発現場のファシリテーション ~メンバーを活かす最強のチームづくり~新岡 優子/前川 直也/西河 誠/小田 美奈子/上田 雅美 技術評論社 2008-01-30
売り上げランキング : 100433 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; しかし、知らなかったよ。教えてくれてもいいと思いますよ（笑） &amp;lt;/p&amp;gt;</description></item><item><title>ありがたい記事</title><link>https://jqinglong.github.io/programmers-office/%E3%81%82%E3%82%8A%E3%81%8C%E3%81%9F%E3%81%84%E8%A8%98%E4%BA%8B/</link><pubDate>Sat, 19 Jan 2008 16:25:09 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%81%82%E3%82%8A%E3%81%8C%E3%81%9F%E3%81%84%E8%A8%98%E4%BA%8B/</guid><description>WEB+DB PRESS vol.42ですが、「ニコニコ動画構築ノウハウ大公開」という特集があります。
これがいい！特に第３章負荷対策。
ダブルバッファドサマリテーブルなどという名前をつけてやっているという検索用テーブルの作り方とかも面白いですし、もっと単純な話では、静的ファイルは後ろに「?ファイルの更新日時」を付けることで、キャッシュさせつつファイル更新も可能にするという、ベストプラクティスというべきテクも紹介されています。こういうのって、それなりに知識のある人こそ、いろいろ工夫しながら独自の方法を編み出してやっていると思うのですが、なかなか情報共有されにくいところだと思うので、こうして記事になっているのは本当にありがたいことだと思います。
WEB+DB PRESS Vol.42WEB+DB PRESS編集部 by G-Tools</description></item><item><title>ということで「旅する会社」読みました</title><link>https://jqinglong.github.io/programmers-office/%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%80%8C%E6%97%85%E3%81%99%E3%82%8B%E4%BC%9A%E7%A4%BE%E3%80%8D%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F/</link><pubDate>Mon, 14 Jan 2008 07:55:46 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%80%8C%E6%97%85%E3%81%99%E3%82%8B%E4%BC%9A%E7%A4%BE%E3%80%8D%E8%AA%AD%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F/</guid><description>「クリエイターは夢を食べると元気になる生き物だ」なんて、青臭いといえばあまりに青臭い。
旅する会社 (株)デジタルステージ代表 平野友康のすごいソフトウェア開発平野 友康
by G-Tools &amp;lt;p&amp;gt; でも、マンガしか読まないと書きながら、一番お気にいりの書籍は「ザ・ゴール」と言ってのけるのは、したたかというかずるい！ &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; SI論 &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 受注仕事がないから、自分たちが「やろう！」と思わないと何も生まれない。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; こういう風に思って、逆にSIを嫌だと思ってしまう人も多いと思う。しかし、SIだって結局はそう。本書でもほかの部分で書いている。「ニーズからは何も生まれない」と。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 大人 &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; ネットで新しいサービスの発表がされるとモヤモヤすることが多くて、あるときその理由に気づいたそうです。大きな会社が、大きな記者会見場でネクタイを締めて、メディアを集めて大々的に発表しているアイデアが、中学生がネットでやり取りしながら考えたり作ったりしていることと全然変わらない、要するに大人げないと。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; この感覚は好き！いや、できない人からしたらできるということはすごいんだけど、そこはもう感覚の世界ですよね。自分たちの使命はそれか、という感覚。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;amp;#8212; &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; あとがきにもちょっとほろりとさせられました。 &amp;lt;/p&amp;gt;</description></item><item><title>旅する会社</title><link>https://jqinglong.github.io/programmers-office/%E6%97%85%E3%81%99%E3%82%8B%E4%BC%9A%E7%A4%BE/</link><pubDate>Sun, 13 Jan 2008 14:19:02 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%97%85%E3%81%99%E3%82%8B%E4%BC%9A%E7%A4%BE/</guid><description>WEB+DB PRESSの読者プレゼントに当選して、頂きました。
旅する会社 (株)デジタルステージ代表 平野友康のすごいソフトウェア開発平野 友康 アスキー 2007-09-10
売り上げランキング : 69765
おすすめ平均 Amazonで詳しく見る by G-Tools &amp;lt;p&amp;gt; 確かに、vol41を見たら、当選者欄に名前載ってる。&amp;lt;br /&amp;gt;というわけで、次はこれを割り込み。 &amp;lt;/p&amp;gt;</description></item><item><title>ザ・ジャストインタイム</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B6%E3%83%BB%E3%82%B8%E3%83%A3%E3%82%B9%E3%83%88%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%A0-2/</link><pubDate>Sun, 13 Jan 2008 13:59:29 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B6%E3%83%BB%E3%82%B8%E3%83%A3%E3%82%B9%E3%83%88%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%A0-2/</guid><description>小説なのに、濃すぎ。どんだけ付箋貼ったんだろう。
ザ・ジャストインタイム 現地現物が最高の利益を生む フレディ・バレ マイケル・バレ 松崎久純 おすすめ平均 予想以上に深みのある物語
「トヨタ生産方式小説」以上の内容でした
トヨタ生産方式の導入事例
内容で勝負している本
確かな読みごたえがあります Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;amp;nbsp; &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 不具合 &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 不具合が発生しているに違いないが気づかなかった＝不良部品を見つける仕組みがない＝欠陥のある部品が完成品に入っていないという保証がない。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 不良品は受け取らない。そのためのレッドビン。&amp;lt;br /&amp;gt;→レッドビンとは、受け取った前工程からの部品に不具合があったら入れておくゴミ箱です。&amp;lt;br /&amp;gt;　各工程でまず受け入れ検査をしましょう、はいいのですが、同じものを大量生産する場合と違って、それを捨ててしまうと別の部品がなく、すぐに作業が止まってしまいかねないわけですね。それで「見える」ようになるのは良いとしても、なかなかその遅れを許容されることはない。であれば、ある受け入れ検査日を決めて待つのではなく、もっと細かい単位で受け入れていかないといけないのではと思いますね。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 作業者は実際は直接ラインを止めるというよりは、マネージャに助けを求める。そしてその回に対処できなければ止める。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 不良を止めるというのは、まだ事後の話。品質を作りこむ話にはなっていない。&amp;lt;br /&amp;gt;→単体テストでも本当は遅くて、単体テストで発生しうるバグを防止するような作り方＝標準作業の手順が必要。しかし、そんなすべてを手順化できるような定型作業をやっているわけではない。とは言っても、標準化できる余地が多数あるのも事実。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 試験も教員の評価も学期の終わりにしかしないのはなぜだろう。終わった後では手の打ちようがないのに。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; コスト &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 価格＝コスト＋利益　ではなく　利益＝価格－コスト&amp;lt;br /&amp;gt;→金曜日に飲みながらこんな話が出て、やはり普通は左のように考えてしまう。しかし、若い人がそう考えるのは、そう教えられているからに他ならない。しかも、ある意味現在のSIはそれで行けてしまっている。毎回特注だから毎回特別な値段。見積根拠も工数。顧客もそれを求める。しかし、ここでも「理想的な顧客」（後述）に合わせて価格を決めるようにしていかないと、誰かが始めたら、あっという間に置いて行かれる。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 1個流し &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 理想を実現できれば、必要な部品の数はラインにつく作業者の数と等しくなる &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 5S &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; ガラクタが本当に必要かを確認することは、単にそのガラクタを処分すること以上の意味がある。何かに使っているかもしれない。だとすると、本当に心配すべきは、工程に問題があることに気づいていないこと。&amp;lt;br /&amp;gt;→なんで机の上に複数のプロジェクトの資料が置いてあるのか。決まってるでしょ。複数のプロジェクトの連絡が来るからです。聞くならなんで複数の連絡が来るのかを聞いてくれ。（いや、反省もしているんですけど） &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 清掃でガタの来ているところを発見して取り替える。清掃は本質的には、点検とメンテナンス。&amp;lt;br /&amp;gt;→やっぱり、コードも清掃すべきだなぁ。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 監督者 &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 生産工程に問題がある時でさえ、監督者が作業者をシフトさせ、次々と材料を送り込む。いったんそうなってしまうと、決められるのは、何を優先して何を後回しにするかということだけだ。だから、どの注文が重要かを勝手に決めて推し進め、ほかのすべてを犠牲にしてしまう。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 在庫 &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 無駄はほとんど目に見えない。だが在庫は目に見える。その裏にムダが推測できる。&amp;lt;br /&amp;gt;→ソフトウェアでは何が目に見える？残業とか？ &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 作業量がきわめてアンバランスだったとしても、何もしていないところを見られたいと思う作業者はいない。手元に在庫がある限り、作業者は別の作業ができてしまう。キャスター付き台車で運ぶメタファー &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 「理想的な顧客」に引き取ってもらう&amp;lt;br /&amp;gt;→「理想的な顧客」は、それが必要になるタイミングで引き取りに来たいはず。運送コストその他の事情で、そうはいかないが、それに合わせて、出荷同然の状態にしておけば、その前の状態の在庫を持たなくてよくなる。&amp;lt;br /&amp;gt;ソフトウェアの「理想的な顧客」は、どういう風にそのソフトウェアを欲しがるだろう。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 生産計画にしたがうということはプッシュしているということ。プルとは、消費されたものを消費された順番に製造するということ。&amp;lt;br /&amp;gt;→まめにスケジュールを見直すのも良いかもしれないけど、なぜ見直すかと言ったら、結局、その後の工程とか納品に影響を与えないようにするため。とすれば、後の工程がどのように進むかに従って自動的に次の作業が決まるようにするカンバン的なものがあればよいのでは。カンバンは後工程から帰ってくるものでないといけないのでは。ちょっとプロジェクト管理的なツールを考える際のヒントになった。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; 工場内の容器はすべてカンバンをつけていなければならない。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 人 &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; アティチュード&amp;lt;br /&amp;gt;→&amp;amp;#8221;Be Agile.</description></item><item><title>中国の.NET</title><link>https://jqinglong.github.io/programmers-office/%E4%B8%AD%E5%9B%BD%E3%81%AE-net/</link><pubDate>Thu, 10 Jan 2008 15:08:18 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E4%B8%AD%E5%9B%BD%E3%81%AE-net/</guid><description>昨日、何とはなしに中国ページを探してみたのですが、中国のみなさんもなかなかですね。情報も早いです。
博客园-.NET新手区
ということで問題です。どのような意味でしょう？（日本語漢字で書いてます）
服務
軟件
手机
微軟
答えはコメント</description></item><item><title>考具</title><link>https://jqinglong.github.io/programmers-office/%E8%80%83%E5%85%B7/</link><pubDate>Thu, 03 Jan 2008 14:18:57 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E8%80%83%E5%85%B7/</guid><description>以前カラーバスの話のときに気になっていた本を、ブックオフで偶然見つけたので買いました。
考具―考えるための道具、持っていますか? 加藤 昌治 おすすめ平均 同じパーターン
具体的で実践しやすい
気の利いたアイデア出しは苦手！
入社9年目でこれだけ書けるとは！
工具　改め　考具。。。 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 本の内容をまとめようと思っても、もう十分にまとまっているので気になり情報をいくつか。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.mandal-art.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;マンダラート&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;このツールを使うのもよいと思いますが、ただここで伝えられるメッセージは、「デザインの力」です。こんなことは別にツールを使う必要もないし、8個挙げてみよう、でもよいわけです。しかし、9マスというデザイン、しかもテーマを囲む8個の四角、そのデザインの力によって引き出されるアイデアがあるということが大切なわけです。マインドマップもそうですよね。単に箇条書きではないところに意味があるわけですね。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.checkpad.jp/list/show/80121&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;オズボーンのチェックリスト&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;Live Searchで「オズボーンのチェックリスト」を検索すると、checkpad.jpのこのページが最初にヒットするのが面白い（ちなみにcheckpad.jpいいですよ）。&amp;lt;br /&amp;gt;有名ですけど、備忘録として自分のいつでも見られる所に置いておくとよいですね。 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; ブレーンストーミング7つの秘訣&amp;lt;br /&amp;gt;IDEOというデザイン会社の秘訣が紹介されています。ただ、思うのは、これからブレーンストーミングをやるという宣言が何よりも必要なのではないかと。結論に向かうべきなのか発散させるべきなのか、結構あいまいな場というのが多いですよね。&amp;lt;br /&amp;gt;内容については検索するといろいろ出てくるので見ていただければと思いますが、イノベーション本は次の次に読む予定で積んであるので、今日はここまで。 &amp;lt;/p&amp;gt;</description></item><item><title>レイディアントシティ横濱物語</title><link>https://jqinglong.github.io/programmers-office/%E3%83%AC%E3%82%A4%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B7%E3%83%86%E3%82%A3%E6%A8%AA%E6%BF%B1%E7%89%A9%E8%AA%9E/</link><pubDate>Thu, 03 Jan 2008 13:24:43 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%AC%E3%82%A4%E3%83%87%E3%82%A3%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B7%E3%83%86%E3%82%A3%E6%A8%AA%E6%BF%B1%E7%89%A9%E8%AA%9E/</guid><description> レイディアントシティ横浜物語―ヨーロッパの街並みが横浜に誕生!!日本綜合地所の新しい街づくり 鶴蒔 靖夫 IN通信社 2005-01
売り上げランキング : 609879 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; ちょっと宣伝本っぽい雰囲気もあってか、本としての評価はあまり見当たりませんが、&amp;lt;a href=&amp;quot;http://konnokiyotaka.txt-nifty.com/pgblog/2005/05/post_354c.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;以前書いたように&amp;lt;/a&amp;gt;すごいマンションであることは間違いなく、本の中でもポイントポイントではやはり参考になることもあります。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 写真コンテスト &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 社員旅行でヨーロッパに行くそうで、かつ、単なる物見遊山に終わらせずに、写真コンテストを行うそうです。&amp;lt;br /&amp;gt;こういうのがちょっといいと思うんですよね。社内LTもそうですよ。自分の感じたものを発表して評価しあう。それを生かしていく。それで成長していくと思うのです。 &amp;lt;/p&amp;gt; &amp;lt;h5&amp;gt; 上司をお客さまと思え &amp;lt;/h5&amp;gt; &amp;lt;p&amp;gt; 上司の話も聞けないのにお客さまの話は聞けないだろうと。これは、場面にもよると思うのですが、でも確かにいつも上司だから分かってくれという態度ではだめで、最初の説明相手として上司にお客さま同様の説明をするというのはあってよいかなと、ちょっと反省。体制も変わったし、これをきっかけにちょっと心を入れ替えます。 &amp;lt;/p&amp;gt;</description></item><item><title>カバー裏</title><link>https://jqinglong.github.io/programmers-office/%E3%82%AB%E3%83%90%E3%83%BC%E8%A3%8F/</link><pubDate>Thu, 03 Jan 2008 12:05:50 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%AB%E3%83%90%E3%83%BC%E8%A3%8F/</guid><description>あけましておめでとうございます。
明日は仕事なので、ちょっとリハビリ。
Code Reading―オープンソースから学ぶソフトウェア開発技法 トップスタジオ まつもと ゆきひろ 平林 俊一 毎日コミュニケーションズ 2004-06-01
売り上げランキング : 38489 Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839919798/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Code Quality ~コードリーディングによる非機能特性の識別技法~&amp;quot; src=&amp;quot;https://i2.wp.com/images.amazon.com/images/P/4839919798.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839918201/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Write Great Code〈Vol.1〉ハードウェアを知り、ソフトウェアを書く&amp;quot; src=&amp;quot;https://i1.wp.com/images.amazon.com/images/P/4839918201.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/489100455X/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Code Complete第2版〈上〉―完全なプログラミングを目指して&amp;quot; src=&amp;quot;https://i0.wp.com/images.amazon.com/images/P/489100455X.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839921946/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Code Craft ~エクセレントなコードを書くための実践的技法~&amp;quot; src=&amp;quot;https://i1.wp.com/images.amazon.com/images/P/4839921946.09._SCTHUMBZZZ_.jpg&amp;quot; border=&amp;quot;0&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4839920230/konnokiyotaka-22/ref=nosim/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;img alt=&amp;quot;Write Great Code〈Vol.</description></item></channel></rss>