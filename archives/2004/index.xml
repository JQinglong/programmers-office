<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2004 on Programmers Office</title><link>https://jqinglong.github.io/programmers-office/archives/2004/</link><description>Recent content in 2004 on Programmers Office</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Wed, 29 Dec 2004 08:02:36 +0000</lastBuildDate><atom:link href="https://jqinglong.github.io/programmers-office/archives/2004/index.xml" rel="self" type="application/rss+xml"/><item><title>初雪</title><link>https://jqinglong.github.io/programmers-office/%E5%88%9D%E9%9B%AA/</link><pubDate>Wed, 29 Dec 2004 08:02:36 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%88%9D%E9%9B%AA/</guid><description>「初雪の日は、女性から告白してよい日」と、韓国では言われているそうです。
ウソかホントか分かりませんが、韓国出張歴数年の人が言っていました。
あと7時間ほど、お待ちしています！（笑）</description></item><item><title>ユースケースレビューに役立つ「ユースケース実践ガイド―効果的なユースケースの書き方」</title><link>https://jqinglong.github.io/programmers-office/%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AB%E5%BD%B9%E7%AB%8B%E3%81%A4%E3%80%8C%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E5%AE%9F/</link><pubDate>Sun, 26 Dec 2004 08:40:11 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AB%E5%BD%B9%E7%AB%8B%E3%81%A4%E3%80%8C%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E5%AE%9F/</guid><description>先日仕事でユースケースレビューをするということになり、何か基準が欲しくて、前から気になっていた「ユースケース実践ガイド―効果的なユースケースの書き方」を買いました。
熟読する時間がなかったので、ざっと流し読みだけしたのですが、それだけでもエッセンスが伝わってきました。しかも、大きな考え方だけでなく、実戦に役立つ部分もかゆいところに手が届く感じで、かつ、ユースケースチェックリストまで付いており、レビューのための下準備のためには最適の本と言ってよいのではないかと思います。
ちょっとアイコンがキワモノ的なので、このまま広まるかは分かりませんが、少なくとも色によるレベルの表現くらいは広まるとよいなと思います。
※ちなみに、海面（青）を基準として、凧や雲（白）は高いレベル、魚（濃紺）は低いレベル、貝（黒）は低すぎるレベルを表現します。
ユースケース実践ガイド―効果的なユースケースの書き方 アリスター コーバーン　Alisteir Cockburn　ウルシステムズ株式会社　山岸 耕二　矢崎 博英　水谷 雅宏
翔泳社
2001-11
売り上げランキング　5,342 Amazonで詳しく見る　by G-Tools &amp;lt;tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/konnokiyotaka-22/ref=nosim/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://i0.wp.com/images-jp.amazon.com/images/P/4894713772.09.THUMBZZZ.jpg&amp;quot; border=&amp;quot;0&amp;quot; alt=&amp;quot;ユースケース入門―ユーザマニュアルからプログラムを作る&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/konnokiyotaka-22/ref=nosim/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://i1.wp.com/images-jp.amazon.com/images/P/4894716933.09.THUMBZZZ.jpg&amp;quot; border=&amp;quot;0&amp;quot; alt=&amp;quot;アナリシスパターン―再利用可能なオブジェクトモデル&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/konnokiyotaka-22/ref=nosim/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://i2.wp.com/images-jp.amazon.com/images/P/4881358642.09.THUMBZZZ.jpg&amp;quot; border=&amp;quot;0&amp;quot; alt=&amp;quot;UMLモデリングのエッセンス―標準オブジェクトモデリング言語入門&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/konnokiyotaka-22/ref=nosim/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://i1.wp.com/images-jp.amazon.com/images/P/4894715775.09.THUMBZZZ.jpg&amp;quot; border=&amp;quot;0&amp;quot; alt=&amp;quot;ストリームラインオブジェクトモデリング―パターンとビジネスルールによるUML&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/4797320192/konnokiyotaka-22/ref=nosim/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://i2.wp.com/images-jp.amazon.com/images/P/4797320192.09.THUMBZZZ.jpg&amp;quot; border=&amp;quot;0&amp;quot; alt=&amp;quot;ワークブック形式で学ぶUMLオブジェクトモデリング―「ユースケース駆動」でソフトウェアを開発する&amp;quot; data-recalc-dims=&amp;quot;1&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt; &amp;lt;p&amp;gt; ちなみに、本屋で横に並んでいた「ユースケース導入ガイド―成功する要求収集テクニック」も、実践的な内容のようで気になりました。より実戦モードになってきたら読み比べてみるのもよいかなと思っています。 &amp;lt;/p&amp;gt; &amp;lt;table border=&amp;quot;0&amp;quot; cellpadding=&amp;quot;5&amp;quot;&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td valign=&amp;quot;top&amp;quot; width=&amp;quot;60&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;http://www.</description></item><item><title>スノボ</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B9%E3%83%8E%E3%83%9C/</link><pubDate>Sat, 25 Dec 2004 14:46:04 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B9%E3%83%8E%E3%83%9C/</guid><description>23日に初スノボに行ってきました。
http://www.tambara.co.jp/
雪があるか心配でしたが何とか大丈夫で、そんなに混んでもなく、楽しかったです。
初心者だけで行って滑れるのかなと思っていましたが、何とかなるもんですね！</description></item><item><title>熊とワルツを</title><link>https://jqinglong.github.io/programmers-office/%E7%86%8A%E3%81%A8%E3%83%AF%E3%83%AB%E3%83%84%E3%82%92/</link><pubDate>Sun, 19 Dec 2004 09:27:05 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%86%8A%E3%81%A8%E3%83%AF%E3%83%AB%E3%83%84%E3%82%92/</guid><description>今日ブックオフにふらりと寄ったら置いてあったので、即購入してしまいました。
正月やることがまた増えた・・・。今年は休み短いのに・・・。
熊とワルツを &amp;#8211; リスクを愉しむプロジェクト管理 トム・デマルコ　ティモシー・リスター
おすすめ平均　リスクに立ち向かい、愉しむ勇気を与えてくれる
勉強になりました。
いつもながらすばらしい本です
堅苦しくないリスク管理を学ぼう
苦労したわりには・・・ Amazonで詳しく見る　by G-Tools</description></item><item><title>「よいサービスにはコストがかかる」は本当か</title><link>https://jqinglong.github.io/programmers-office/%E3%80%8C%E3%82%88%E3%81%84%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%81%AF%E3%82%B3%E3%82%B9%E3%83%88%E3%81%8C%E3%81%8B%E3%81%8B%E3%82%8B%E3%80%8D%E3%81%AF%E6%9C%AC%E5%BD%93%E3%81%8B/</link><pubDate>Sat, 18 Dec 2004 19:21:02 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%80%8C%E3%82%88%E3%81%84%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%81%AF%E3%82%B3%E3%82%B9%E3%83%88%E3%81%8C%E3%81%8B%E3%81%8B%E3%82%8B%E3%80%8D%E3%81%AF%E6%9C%AC%E5%BD%93%E3%81%8B/</guid><description>「一橋ビジネスレビュー」という雑誌のWebサイトがあります。
http://www.toyokeizai.co.jp/mag/hitotsubashi/index.html
その中の「ケース・ディスカッション」というのが面白くてよく見ています。
今回は「フレッシュネスバーガー」が取り上げられています。
私はあまりフレッシュネスバーガーにたいする印象はなかったのですが、定食屋「おはち」もやっている会社で、そちらの方は会社の近くにあるので、たまに行きます。
ディスカッションではこの会社がいかに面白い経営をしているのかを知るために、その前提となる状況等を分析するところから始まります。
僕たちが業界構造を分析しなさいとか言うと、すぐ売っているもの
、この場合はハンバーガーだけで切ってしまうことになる。そうい
う視点じゃなくて、一体だれを相手にどんな価値を提供しているの
かで、コンペティターが全然違う。そこで本当に競争が成立するの
か、あるいはしないのか。参入する価値があるのか、ないのか。
すなわち、ハンバーガーショップはマクドナルドだけを相手にするわけではない、対象顧客によってはスターバックスが相手かもしれないし、街の一軒家レストランかもしれない、もしくは、顧客の財布と言う観点から見たら携帯電話が相手かもしれないと言うわけです。なるほどという感じです。
そして、今回の中で一番印象に残った言葉が「『よいサービスにはコストがかかる』は本当か」というものでした。
フレッシュネスでは、厳しい教育をやっているわけではなく、イメージビデオを見せるだけ、それでも店員は楽しそうに働いていると言うことです（「おはち」ではそこまでの素晴らしさは感じませんが、別に悪い印象もないですね）。それがよいサービスとして現れると言うことです。
最近思っていることですが、システム開発はどうしても工数ベースの見積になってしまいます。すなわち、原価率80%とか90%とかがあたりまえの世界です。フレッシュネスでは、一番原価率の高いフレッシュオレンジジュースやフレッシュネスバーガーが75%くらいのようです。この差は何かと言うと、やはり顧客の満足度と言うことになるのかなと思います。顧客の感じるシステムの価値が工数を超えてこない限りは工数ベースの原価による見積をし続けなければならないわけです。
しかし、どうも世間の風潮としてはシステム開発にお金をかける方向に動いているように見えます。多分私の会社だけではないと思います。失敗プロジェクトが発生すると反省の言葉としてでてくるのは「要求分析が甘かった」「設計が甘かった」です（8年前から聞き続けている！）。その度に、羹に懲りて膾を吹く式に設計書を細かく細かく書こうとします。「きちんとしたものを作ろうとしたらお金がかかるんですよ」すなわち「よいサービスにはコストがかかる」という説明がされます。
まあ、私も色々な制約の中で仕事をしているわけですからこういう説明をしてしまうことがしょっちゅうですけど、本当は違うなと思います。「あれもこれもしなければ品質が保てない」と言われるのですが、「うちの現状はそうかもしれないけど、もっと勉強して同じ品質をより低コストで実現しよう」と言いたいことがしばしばです。
フレッシュネスでは、心地よさを提供するための教育手段として、座学ではなくイメージビデオと言う方法を使ったわけです。技術者に技術を提供させるためにどう勉強させていくべきか、大きな問題です（もちろん自戒を込めてですが）。
ところでディスカッションは社長の話になってくるのですが、それについてはちょっと疑問もありました。
一応フードマネジメント会社を目指しましょうといっています。
オペレーションはお店がやることで、我々は店が販売に専念できる
仕組みをつくるインキュベーションのチームだと。皆さんは販売に
専念しなさいというので、セグメントしちゃっている。
これをやって面白いのかが不思議なのです。社長はもともと建築の設計をしていたと言うことで、現場の面白さは判っていると思うんですけどね。で、こういう人たちが儲けるから、頭を動かすだけをしようとする人が多すぎのような気がします。システム開発では上流志向ということがあると思います。若い人たちもすぐに上流だけをやる立場になりたがります。よく「PGもやってるんですか！」と驚かれますが、面白いからやっていると言う面もありますが、やらないとついていけなくなる、やっていた方がよい分析・設計ができるからやっているわけです。これはあまりにも愚直な考えですかね・・・。
そうは言っても、アイデアはさすがに面白いです。
１軒しかないお店を1000軒つくれないか、というのが我々のビジョ
ンなんです。だから、チェーン理論だと、食材を共通にするとか、
何かでシナジー効果を出そうとすると思うんですが、究極の姿とし
てはチェーンじゃないというふうに最近思ってきています。要する
に、１店単位で投資と売上げをバランスさせてもうかればいいわけ
です。
これは、「私は私」の時代だからと言うことなのですが、ある意味システム開発はこの路線を行くわけです。シナジー効果を出すために店を出すのではなくて、儲かる店を出すために本部ができることをする。フレームワークを使うためにシステムを作るのではなく、よいシステムを作るために・・・、また愚痴になりそうなのでやめておきますが、こういう経営における本部の役割みたいなことは、今後参考にしていきたいような気がします。
というわけで一人盛り上がってしまいました。
他の企業についてのディスカッションも面白いので、よかったらどうぞ！</description></item><item><title>Developers Summit 2005</title><link>https://jqinglong.github.io/programmers-office/developers-summit-2005/</link><pubDate>Sat, 18 Dec 2004 03:30:07 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/developers-summit-2005/</guid><description>Developers Summit 2005の登録が始まっていましたので、さっそく申し込んでおきました。
http://www.seshop.com/event/dev/</description></item><item><title>パターンワーキンググループ 第11回勉強会</title><link>https://jqinglong.github.io/programmers-office/%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%83%AF%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97-%E7%AC%AC11%E5%9B%9E%E5%8B%89%E5%BC%B7%E4%BC%9A/</link><pubDate>Fri, 17 Dec 2004 14:05:53 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%83%AF%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97-%E7%AC%AC11%E5%9B%9E%E5%8B%89%E5%BC%B7%E4%BC%9A/</guid><description>昨日は、パターンワーキンググループ 第11回勉強会に参加してきました。
http://patterns-wg.fuka.info.waseda.ac.jp/study/
議事録
これまで、参加したいと思いながら時間が取れなかったのですが、ちょうど.NETのタイミングで参加できました。
最近のMSはこういうことをし始めてきていて、特に実践にすぐにつながりそうなアプリケーションブロックなどは非常に興味があります。
昨日の資料では、
パターン→アプリケーションブロック→参照アーキテクチャ
とありましたが、今回はこの「パターン」につき、特にアプリケーションのレイヤー分割についてのパターンの紹介を中心に説明を受けました。
印象に残ったのは、レイヤー分割に関して、厳密なレイヤー分割とゆるやかなレイヤー分割が考えられ、レイヤー分割の短所としては複雑さと言うことがあるのだから、無理に分割する必要はないと言うことでした。
規則を決めてしまうと無理にそれに従うことは良くある話ですが、例えば、UIとビジネスロジックを基本的に分割するとしても、場合によってはUIからデータバインドコントロールを使用することもあるだろうと言うことでした。
実感として納得です。
最後の質問では、分散環境でのシングルトンをどう考えるかと言うのは面白い疑問だと思いました。
また参加したいと思います。</description></item><item><title>Linuxザウルス SL-C3000</title><link>https://jqinglong.github.io/programmers-office/linux%E3%82%B6%E3%82%A6%E3%83%AB%E3%82%B9-sl-c3000/</link><pubDate>Sun, 07 Nov 2004 15:20:49 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/linux%E3%82%B6%E3%82%A6%E3%83%AB%E3%82%B9-sl-c3000/</guid><description>4GBHD搭載、巷ではギガザウルスとも呼ばれる、Zaurus　SL-C3000を予約してしまいました。
手帳がなくてどうしようかなと思っていたのもありますが、まあ、衝動買いです。
待ち遠しい～！
さらに、こんな本が、僕の愛するブックオフにあり、こちらも買ってしまいました。
ハッキングLinuxザウルス 塚本 牧生　吉岡 玲子　古川 大輔　鈴木 晃　ichitokumei　田村 俊生
ソフトバンクパブリッシング
2004-06
売り上げランキング　9,295
おすすめ平均　ザウルスを使い倒す
Amazonで詳しく見るby G-Tools &amp;lt;p&amp;gt; 目次を見たらすごいことになっています。&amp;lt;br /&amp;gt; ・シェル入門&amp;lt;br /&amp;gt; ・telnetサーバ・FTPサーバ・ApacheWebサーバ・VNCサーバ&amp;lt;br /&amp;gt; ・Perl・Java・Ruby&amp;lt;br /&amp;gt; ・・・何をしようとしているのでしょう？？（笑）&amp;lt;br /&amp;gt; まあ、遊んでる時間はなさそうなんですけど・・・。&amp;lt;br /&amp;gt; 便利なページがあったので、リンクさせていただきます。&amp;lt;br /&amp;gt; &amp;lt;a href=&amp;quot;http://digit.que.ne.jp/visit/index.cgi?Linux%A5%B6%A5%A6%A5%EB%A5%B9%2FSL-C3000&amp;quot;&amp;gt;http://digit.que.ne.jp/visit/index.cgi?Linux%A5%B6%A5%A6%A5%EB%A5%B9%2FSL-C3000&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;</description></item><item><title>第１５回高円宮杯全日本ユース選手権</title><link>https://jqinglong.github.io/programmers-office/%E7%AC%AC%EF%BC%91%EF%BC%95%E5%9B%9E%E9%AB%98%E5%86%86%E5%AE%AE%E6%9D%AF%E5%85%A8%E6%97%A5%E6%9C%AC%E3%83%A6%E3%83%BC%E3%82%B9%E9%81%B8%E6%89%8B%E6%A8%A9/</link><pubDate>Mon, 11 Oct 2004 16:36:45 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%AC%AC%EF%BC%91%EF%BC%95%E5%9B%9E%E9%AB%98%E5%86%86%E5%AE%AE%E6%9D%AF%E5%85%A8%E6%97%A5%E6%9C%AC%E3%83%A6%E3%83%BC%E3%82%B9%E9%81%B8%E6%89%8B%E6%A8%A9/</guid><description>昨年からにわか広島ユースファンになってますが、爆勝を期待して埼玉スタジアム2002まで行って来ました！
きれいなグランドです。ふと気づいたのですが、競技場の周りは一段低く、堀のようになっているのですね。
昨年のナビスコカップでレッズが優勝したときにはとんでもない騒ぎになった国立競技場でしたが、そういうことがないわけですね。
ユースの試合だとさすがに満員にはなりませんが、自由席はかなり入っていて、2000人以上だったそうです。
スタメンではないのですが、一誠コールが起こります（笑）。
さて、キックオフです。
前半はほぼ互角でしょうか。やや広島が押し気味だったでしょうか。ただ、ジュビロのシュートが結構きわどいところに来ていて、キーパー佐藤昭大（将来が期待されているようですね）も大活躍でした。
個人的には、自分が見ていた近くのポジションだったこともあって、13番大屋翼がよかったです。速いチェックが効いていたと思います。
両チーム惜しいシュートを放ちながらも前半を終わります。
後半では、やはり近くでプレーしていた19番平繁龍一がよかったです。何度も仕掛けて右から中に入れてました。もう少しセンタリングの精度が上がれば、という気はしましたが、なんと一年生なんですね。びっくり。
後半15分くらいで、もはや全国区の顔になった（？まだですね・・・）高柳が登場します。そして、その直後、10番前田俊介、抜け出してまた抜きでゴールを決めました！！
今日は、前田のハットトリックを期待してきたので、それくらいやってくれないと困ります！なんて、初めて見たのですが、いやらしいプレーをしますね。体の預け方とか、足の出し方とか、そしてまた抜き。まあ、プレーのいやらしさはよいとして、歩き方とかもう少しさわやかさも欲しいかも。そうは言っても、やはり目立ってました。それと、彼のヘディングが好き。ああいう強烈なヘディングをしてみたいです。
高柳はまあ特に目立つこともなくボランチの位置をこなしていました。
最後の10分のジュビロは、激しかったですね。
放り込みといえば、放り込みなんですが、結構いいところに行くので、点が入ってもおかしくなかったと思います。
最後は、キーパーもペナルティエリアまで行ってました（笑）。でも、ロングパスに頭で合わせたときは、よもや、と思いましたね。
しかし、なんとか粘りきって、広島優勝です！最終ラインの粘りがよかったと思います。
去年も失敗したと思ったのですが、決勝（去年は3位決定戦）とかを見る場合は、自由席ではなくてメインスタンドの方が有名人が見れてよかったのかなと思いました。すくなくとも川渕チェアマンくらいは見えたはずなので。
というわけで、盛り上がった試合観戦を終えて、仕事をしに会社に戻ったのでした・・・。</description></item><item><title>スマートクライアント　アプリケーションアーキテクチャ　実装編（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%80%80%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD-2/</link><pubDate>Sat, 02 Oct 2004 16:49:18 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%80%80%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD-2/</guid><description>[T5-343]
まず、ここで初めて言葉を知ったのですが、マイクロソフトは現在アプリケーションブロックの提供に力を入れているようです。
http://www.microsoft.com/resources/practices/code.mspx
アプリケーションブロックはシンプルなAPIを開発者に提供することを目的としており、プラグインベースのアプローチでカスタマイズが可能であることをポリシーとしているとのことでした。
ということで、上記URLに色々な観点から用意されているのですが
・Caching Application Block for .NET
・Smart Client Offline Application Block
・Updater Application Block for .NET
・User Interface Process Application Block for .NET
あたりを適用可能ですよと言うことです。やはり設計編で力を入れて説明されたところに関わるわけで、これであってこそスマートだ、と言う話もあると言うことでした。
で、さらに、Enterprise Libraryというものが提供される予定のようです。
http://www.microsoft.com/resources/practices/comingsoon.mspx
次に配置についての話があり、現時点ではノータッチデプロイとロータッチデプロイが考えられ、クリックワンスが出たらそれでよいわけだが、現時点では、ロータッチデプロイ、すなわち、ランチャーをプリインストールする（それはノータッチでもよいわけだが）形式がよいのではと言うことでした。理由としては、
・無駄なプロービングがあり、性能に影響する
・当然ローカル起動よりも時間がかかる
・セキュリティポリシー配布のためには結局何らかのインストールは発生する
ということです。
また、データ転送要領削減方法として、DatasetSarrogateとかZip圧縮というキーワードがありました。
最後に余談ですが、デモの中でトレースツールを使っていて、名前を控えておいて調べてみたところ
Microsoft SOAP Toolkit
http://www.microsoft.com/japan/msdn/soap/general/soap_faq.asp
でした。
便利そうでだったので、メモ。</description></item><item><title>スマートクライアント　アプリケーションアーキテクチャ　設計編（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%80%80%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD/</link><pubDate>Sat, 02 Oct 2004 16:43:08 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%80%80%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD/</guid><description>[T1-412]
いつまで生き残るか分かりませんが、そうは言っても目をつぶるわけにはいかないスマートクライアントについて、まず設計編。
アプリケーションアーキテクチャガイドというものがあり
http://msdn.microsoft.com/library/default.asp?url=https://jqinglong.github.io/programmers-office/library/en-us/dnpag/html/SCAG.asp
これをベースとした話でした。
ガイドには
・データハンドリング
・接続方法の選択・断続的な接続のサポート
・配置とアップデート
・性能
・セキュリティ上の考慮
といった点について解説されているようです。
特にデータキャッシングや断続的な接続のサポートについて解説が多めになっていたように思います。</description></item><item><title>SQLCLR（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/sqlclr%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</link><pubDate>Sat, 25 Sep 2004 14:55:28 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/sqlclr%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</guid><description>SQL Server 2005 : SQLCLR – .NET Framework ベースのデータベースプログラミング
[T2-367]
今回の一つの目玉と思われる、SQL Server 2005のSQLCLRです。
SQLCLRというのは、.NET言語で作ったアセンブリをT-SQLから呼び出せるという仕組みです。
・一貫したプログラミングモデルを採用できる
・T-SQLでは不可能・難しい操作が可能になる
・パフォーマンス向上
等のメリットが発生します。
そして、VisualStudio2005でデータベースプロジェクトとして環境が統合されることにより、配置やデバッグが容易になり、開発がしやすくなります。
これも、大いに期待できそうです。
なお、ちょっと本題と外れますが、デモの中で紹介されていましたが、プロファイラにパフォーマンスデータを読み込ませ、どのステートメントで負荷がかかっているか、時間がかかっているかが分かるようになります。パフォーマンス調査もやりやすくなりそうです。</description></item><item><title>Reporting Services（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/reporting-services%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</link><pubDate>Sat, 25 Sep 2004 03:47:48 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/reporting-services%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</guid><description>SQL Server 2005 : Reporting Services によるレポーティング アプリケーションの構築
[T2-374]
一番見やすいデモでした。途中トラブルがあったにもかかわらず、落ち着いてやり直せばすぐに立て直せると言うところまで見せてもらいました。
それにしても、ちょっと安定していないなと言う印象は免れませんが。
Accessレポートのインポートができるということで、そこに大きな期待をしたのですが、今回の範囲ではデモはありませんでした。
ただ、Excel出力やPDF生成もあり、既存の帳票ツールを吹き飛ばすパワーを感じました。あとは、どこまで作りこみができるかと言うところだと思います。</description></item><item><title>裏を打てばジャズになる</title><link>https://jqinglong.github.io/programmers-office/%E8%A3%8F%E3%82%92%E6%89%93%E3%81%A6%E3%81%B0%E3%82%B8%E3%83%A3%E3%82%BA%E3%81%AB%E3%81%AA%E3%82%8B/</link><pubDate>Mon, 20 Sep 2004 17:23:20 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E8%A3%8F%E3%82%92%E6%89%93%E3%81%A6%E3%81%B0%E3%82%B8%E3%83%A3%E3%82%BA%E3%81%AB%E3%81%AA%E3%82%8B/</guid><description>最近は音楽青年なので、今日は半日息抜きで「スウィングガールズ」を見てきました。
で、中に出てきた言葉が「裏を打てばジャズになる」と。いいなあ、こういうシンプルな定義。
公式サイトを見ると色々なイベントもやられているようで、行きたくなってしまいます。</description></item><item><title>IoCとイベントドリブン（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/ioc%E3%81%A8%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%89%E3%83%AA%E3%83%96%E3%83%B3%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</link><pubDate>Sun, 19 Sep 2004 23:27:03 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/ioc%E3%81%A8%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%89%E3%83%AA%E3%83%96%E3%83%B3%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</guid><description>マイクロソフトのコンポーネント技術はどう変わってきたか？
[L4-S001]
IoCの話の中で、イベントドリブンという言葉が出てきました。
この言葉で、ちょっとIoCということの意味が分かったような気がしました。自分が書くアプリからライブラリを呼ぶのに対して、イベントの部分だけ自分で書く、確かに制御が反転している！！・・・単純すぎますか？
アスペクト指向についても説明がありましたが、まだ理解し切れません。修行します。</description></item><item><title>エンタープライズアプリケーションにおけるパターン分析（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%91%E3%82%BF/</link><pubDate>Sat, 18 Sep 2004 17:17:32 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%91%E3%82%BF/</guid><description>[T1-401]
まず、アジェンダが、単なるリストではなく、階段状の図になっていました。
アジェンダという、何よりも即時的な理解が求められる部分を図式化する、というのはとてもよい案なのではないかと思いました。
内容の中で、よいと思った言葉が、「意思決定ポイントの再利用」という言葉です。
「知識の再利用＞コードの再利用」であるが、「コードでは開発者の”意図”をほとんど伝えられない」ので、それを示すためにパターンを活用し、再利用性を向上させる、という話です。
確かに、コードさえ見れば（できたらテスト結果もあれば）「何をしているか」は分かるのですが、「何をしたかったか」を説明できれば修正しなくてもよい、場合によっては、やってはいけない修正を避けられる、ということがありますね。大切なことだと思います。</description></item><item><title>プログラミングレシピ（Tech・Ed 2004 Yokohama）</title><link>https://jqinglong.github.io/programmers-office/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%AC%E3%82%B7%E3%83%94%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</link><pubDate>Sun, 12 Sep 2004 15:55:09 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%AC%E3%82%B7%E3%83%94%EF%BC%88tech%E3%83%BBed-2004-yokohama%EF%BC%89/</guid><description>しばらく、Tech・Edの情報整理をしたいと思います。
まず最初は、一番最後のセッションからのネタになりますが、プログラミングレシピという言葉について。
Architect Salon
http://www.event-registration.jp/events/te04/sp_architectSalon.htm
このセッションは、上記ページのタイトルとは関係なく、SOA・IOC等の技術動向に対する3人のスタンスや、技術者としての心構え的なことについて語ってもらう、というものでした。
色々とおもしろい点はあったので、また別途整理しておくかもしれませんが、一つ引っかかりを持った言葉がレシピという言葉でした。
米持さんが、料理はプロジェクト管理だという話をしている中で、そう言えばプログラミングについてもレシピと言うのがあったらよいですね、料理のレシピでは材料から完成品イメージとカロリー表示までされているように、このようなコンポーネントを組み合わせるとこのような性能のアプリケーションができます、というものができているとよいですね、と言うような話が出て、3人とも合意、という流れでした。
ちょっと冗談を言っているような場面でしたので、もちろん本気にするところではないのですが、このような言葉は便利に使われやすいので、自分的に整理しておきたいと思います。
何が問題かというと、アプリケーションは料理と違ってコピーができます。あるレシピに従ってアプリケーションができた場合、次もそのレシピで同じアプリケーションを作ると言うことはあり得ないのではないでしょうか？逆に言うと、レシピができているアプリケーションは（工数的には）「タダ」ではないでしょうか？
・・・という話があり得ると思います。
これに対する一つの考え方として、レシピの視点という話があります。料理という完成品から見たレシピではなく、材料・素材から見たレシピだとすると、「このコンポーネントを使ってこのようなプログラミングをすると、このようなアプリを作ることができ、このような性能を期待できる」というものになり、これであればきっと皆さん意義に合意だろうと思います。
しかし、さらに考えたいのですが、レシピを作りたいようなアプリケーションって、何でしょう？例えばMSOfficeにレシピがあったとしてそれを使ってOfficeを作ろうとする人がいるでしょうか？そう言うものが欲しいのではないと思いますく。日々似て非なるアプリを作る中で、共通する部分については同じように作りたい、という気持ちがあるからレシピという考えが出るのだと思います。なぜ同じものではなく、似て非なるものを提供するかというと、ユーザの要求に応えることが「商売」だからです。もちろん、コストとの兼ね合いですから、なるべく同じものを提供するように話すことが多いですが、それでも同じものにはならないですし、同じものを提供できるようなパッケージ製品についてレシピはいらないのです。
では、同じものを作ることはないのだからレシピなんていらないのでは、と言うことにもなるのですが、あとはレシピと料理人のレベルと言うことになります。酢豚のレシピを見て、酢を黒酢に変えた場合の材料費・調理時間・カロリー等が見て取れれば、普通の酢豚のレシピもやはりあった方がうれしいということです。
まあ、マイクロソフトもレシピというのはおもしろいと思っているのでしょうかね。
http://www.microsoft.com/japan/users/recipe/
いきなり、とりとめもない話から始めてしまいましたが、もう少しとりとめもない話をこれからしばらく続けたいと思います。</description></item><item><title>Tech・Ed 2004 Yokohama</title><link>https://jqinglong.github.io/programmers-office/tech%E3%83%BBed-2004-yokohama/</link><pubDate>Sat, 14 Aug 2004 13:19:29 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/tech%E3%83%BBed-2004-yokohama/</guid><description>SQL Server ユーザーグループ経由で、INETAJapanさんよりTech・Ed 2004 Yokohamaの招待状を頂きました。
初参加なので楽しみです。
最近、泣くほど忙しく、勉強の時間がとれていないので、いい時間ができたなと思います。とは言っても、夏休みを使っていくんですけどね。
SQL Server ユーザーグループ</description></item><item><title>一五一会</title><link>https://jqinglong.github.io/programmers-office/%E4%B8%80%E4%BA%94%E4%B8%80%E4%BC%9A/</link><pubDate>Sun, 08 Aug 2004 16:06:13 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E4%B8%80%E4%BA%94%E4%B8%80%E4%BC%9A/</guid><description>一五一会音来、買ってしまいました。
http://www.yamano-music.com/docs/hard/ginza4/fg04.html
うれしいな、弾く時間ないけど。
ちょっとだけやってみましたが、ギターって思ったよりも難しいです。
でも、なんか楽しい！</description></item><item><title>社労士勉強用に</title><link>https://jqinglong.github.io/programmers-office/%E7%A4%BE%E5%8A%B4%E5%A3%AB%E5%8B%89%E5%BC%B7%E7%94%A8%E3%81%AB/</link><pubDate>Sat, 15 May 2004 16:30:30 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%A4%BE%E5%8A%B4%E5%A3%AB%E5%8B%89%E5%BC%B7%E7%94%A8%E3%81%AB/</guid><description>買ってみようと思います。
らくらく合格 うかるぞ社労士〈2004年版〉
秋保 雅男 ， 松本 幹夫
おすすめ平均社労士受験のバイブル
Amazonで詳しく見る</description></item><item><title>宮島の旅</title><link>https://jqinglong.github.io/programmers-office/%E5%AE%AE%E5%B3%B6%E3%81%AE%E6%97%85/</link><pubDate>Sat, 15 May 2004 15:31:24 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%AE%AE%E5%B3%B6%E3%81%AE%E6%97%85/</guid><description>広島出張のついでに、以前から行きたいと思っていた宮島に行ってきました。
まずは市内から広電で宮島口まで。1時間弱です。広島は生まれて3回目で、原爆ドームは2回目、最初のイメージは思ったより小さいな、という感想が先行してしまったのですが、今日電車から見たら素直に悲惨さを感じられました。
宮島口に着いて、電車をパチリ。このタイプのきれいな電車が結構走っていました。古くさいイメージだったので、ちょっとした驚きだったのです。駅を出たらもみじビルがお迎えでした。
宮島口からフェリーで宮島に渡ります。JRフェリーだと大鳥居の近くまで行ってくれるということでそちらへ。宮島ってこんなに大きかったんですね。
着いたら早速厳島神社へ向かいます。修学旅行生がいっぱい！
厳島神社は、満潮時の方が風情がありそうな気がしますが、今日はちょうど干潮だったようで、神社の方にはほとんど水がなく、潮干狩りをしている人もいました（禁止という立て札がありましたが）。
ただ、そうは言っても、世界遺産！だから、と言うことではなく、やはりおもしろいと思いました。こんな場所に神社を造り、海の中に大鳥居を作るというコンセプトがすごいと思います。昔は大鳥居をくぐって船が入ってきていたということですが（よそのツアーガイドさんの解説を盗み聞き）、想像するだけでおもしろそうだと思います。
帰り道の参道は、寄り道を楽しみながら。
まずは、焼きたてもみじまんじゅう。フルーツ味は温かいのはないということで、残念。温かいのは抹茶味を食べましたが、温かいのはおいしいですね。
次は、やはり焼きガキ。行きに値段チェックしながら歩いていたので、おそらく最安値の2個400円のお店で食べました。本当に大振りでプリプリでおいしかったです。ただ、ちょっとだけ磯の香りが強過ぎかも。そういうのが好きでないとダメな人もいるかもしれないですね。ビールを飲みながら食べたかったですが、この時点では若干二日酔い気味だったのでやめときました。
そんなこんなで、割とあっさり旅でしたが、気分的には満足です。
（締めの昼ご飯はたこ天むす）
お土産：
春もみじ（生チーズもみじまんじゅう）：5個入り550円×2個
川通り餅：1260円
旅先でのロマンス：プライスレス（いや、なかったんですけど）</description></item><item><title>HarvestedFramework</title><link>https://jqinglong.github.io/programmers-office/harvestedframework/</link><pubDate>Sat, 08 May 2004 16:30:04 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/harvestedframework/</guid><description>参考：（Martin Fowler’s Bliki in Japaneseより）
http://capsctrl.que.jp/kdmsnr/wiki/bliki/?HarvestedFramework
http://capsctrl.que.jp/kdmsnr/wiki/bliki/?FrameworkBuilding
Fowlerさん、さすがいい言葉持っていますね。
昨日も、朝まで飲みながら話していた内容なのですが・・・
いえ、以下はフィクションです・・・（涙）
ある会社では、フレームワークを作りました。
Fowlerさんの言葉で言うとFoundationFrameworkということになります。
まあ、そのこと自体はよいとします。これまで標準化をしてこようとして、なかなかうまくいかなかったのが、これを土台としてちょっとでも進んでくれればよいと思うわけです。
しかし、完璧なフレームワークなど、そう簡単には作れません。だから、日々改善が必要なわけです。そして、本当に改善ができるのは実際にそれを利用している人たちです。
ところが、このフレームワークは実際にフル活用される前に販売され始めました。当社から発注するアプリケーションはこのフレームワークを使用して作らなければなりませんから、協力会社には順調に売れているようです。そして、1年もないサイクルでバージョンアップをしていきました。
そうなるとこれを使って作る方は訳が分からなくなっていきます。フレームワークは売り物ですから、気軽に修正するわけにはいきません。改善要望を出しながらも、対応されるまでは変な工夫をしながら無理矢理にでもそれを使います。
ある程度再利用可能なシステムができても、新しいフレームワークができるとそれに対応させてテストをし直します。他人のフレームワークなら、「このシステムはバージョンxを前提としています」でよいと思いますが、自社のフレームワークですから、古いバージョンを使うわけにはいきません。
この話に対して、私は、フレームワークを売るという場合は、残りかすを売ればよいのではないかと思っていました。フレームワーク使う・作る目的は開発をうまく進めると言うことです。日々の開発の中で再利用できるところを抽出・整理していくことによりフレームワークと呼べるものができてくる。うまくいくものができたら、それを売って儲けてもよいかもしれない。ある時点のものを売りながら、自分たちは日々の開発の中で改善を重ね、よりよいものにしながら使っていけば、他社より有利に開発を進められます。
残りかすというのは言葉が悪いかなと思っていたら、FowlerさんはHarvestedFrameworkという言葉を使っていたというわけです。結実型というのが訳としては気に入りました。「残りかすを売ればよいのではないですか」と言っても聞き入れてもらえないような気がしますが、「フレームワークも充実してきたので、これからは結実型のフレームワークを目指していきませんか！」という話なら聞いてもらえるような気もします。がんばろ。</description></item><item><title>日本市船選抜</title><link>https://jqinglong.github.io/programmers-office/%E6%97%A5%E6%9C%AC%E5%B8%82%E8%88%B9%E9%81%B8%E6%8A%9C/</link><pubDate>Mon, 03 May 2004 05:11:00 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E6%97%A5%E6%9C%AC%E5%B8%82%E8%88%B9%E9%81%B8%E6%8A%9C/</guid><description>GW暇つぶし企画
ひしゃくさんで日本田中選抜という企画があっておもしろかったので、マネして
日本市船選抜！
北嶋秀朗　カレン・ロバート
（清水）　（磐田）
西 紀寛
（磐田）
本橋卓巳　原一樹
（鳥栖）　鬼木 達　（駒大）
（川崎）
茶野隆行　大久保裕樹　増嶋竜也　中澤聡太
（市原）　（広島）　（F東京）　（柏）
黒河貴矢
（清水）
監督：布啓一郎（Ｕ－１６日本代表監督）
原（名古屋→京都）羽田（鹿島）、そして今回メンバーに入れましたが本橋の活躍を期待したいです。</description></item><item><title>OSを入れた後にインストールする10のアプリケーション</title><link>https://jqinglong.github.io/programmers-office/os%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F%E5%BE%8C%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B10%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7/</link><pubDate>Thu, 29 Apr 2004 16:50:35 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/os%E3%82%92%E5%85%A5%E3%82%8C%E3%81%9F%E5%BE%8C%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B10%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7/</guid><description>uessay（別館）さんを見ておもしろかったので。
自宅と会社では違いますが、会社の場合。
1.ウイルスバスター
2.TextPad（テキストエディタ）
3.Datula（メール）
4.QTClip（クリップボード履歴）
5.ExpLzh
6.WPBF(Windows Popup Biff)（メールチェッカ）
7.Office
8.Visual Studio （6.0、2002、2003）
9.SQLServer
10.Adobe Reader
レジストしないで試用を続けているものもありますが、書いていいのかな・・・。
昔と比べると
・開発系はすっかりJava系（MS以外系）は無視
・HTML作成系（画像系等）もなし
・ブラウザもIE
というところで遊びというか余裕というかがなくなっているような気がします。
NUnit
あたりが当たり前のような顔をして入っていると、「新しいな」と思いますが、まだまだ10位には入らないですね。
これらをインストールすると、次にやる作業としてはブラウザ巡回設定があるでしょうね。
「ブラウザを入れた後にブックマークする10のサイト」
みたいな企画もどこかにあるでしょうか。最近だと、単なるお気に入りサイトではなく、アンテナ等の「自分で登録系」が入ってくると思うのですが。</description></item><item><title>オセロー</title><link>https://jqinglong.github.io/programmers-office/%E3%82%AA%E3%82%BB%E3%83%AD%E3%83%BC/</link><pubDate>Thu, 29 Apr 2004 04:19:13 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%AA%E3%82%BB%E3%83%AD%E3%83%BC/</guid><description>昨日は、ル・テアトル銀座にて、ロイヤル・シェイクスピア・カンパニーの「オセロー」を見てきました。
http://www.horipro.co.jp/othello/
大学時代は好きでよく見に行っていた芝居も、時間のコントロールが難しくなって遠ざかっていたのですが、昨日は一か八かで当日券目当てに行ってみたところ、残席があって助かりました。場所が分からなくて、ちょっと開始に遅れてしまいましたけど。
英語がどれくらい聞き取れるか試したいのもあったのですが、まあ、9割くらいでしょうか、・・・分からないのが（涙）。
直前に本を読んでいったので、ストーリーは分かりましたけどね。
そういう意味ではストーリーの楽しみというのはなかったわけです。こういう有名なお芝居を1万円出して見に行くというのは、音楽を聞きに行くのと同じような感じで、舞台の緊張感を楽しんだり、アレンジを楽しんだりするわけで、贅沢な趣味だなーと、あらためて思います。
今回楽しめたのは、悩めるオセローの感情を軽い踊りで表現した部分、イアーゴーのひょうひょうとした動作、そしてなんと言っても、デズデモーナの可愛らしさでした。特にデズデモーナの歌は絶品です。Lisa Dillonさん、要注目です！
参考：
http://homepage1.nifty.com/mneko/play/RA/20040417m.htm
http://usakuma.cocolog-nifty.com/blog/2004/04/post_2.html
http://www.rada.org/grad02/dil.html
http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?ft20040421a4.htm
http://www.alice-it.com/shakespeare/othello.html</description></item><item><title>電子カルテシステム</title><link>https://jqinglong.github.io/programmers-office/%E9%9B%BB%E5%AD%90%E3%82%AB%E3%83%AB%E3%83%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</link><pubDate>Sat, 24 Apr 2004 14:15:45 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E9%9B%BB%E5%AD%90%E3%82%AB%E3%83%AB%E3%83%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</guid><description>実は、今日まで4泊ほど入院していたのですが、その病院は電子カルテ導入3日目ということで、すごいことになってました。
最初は、良いネタになると思ってみていたのですが、そんな不謹慎なこと言っていられないなと・・・。
まず、検温・血圧を見に来た看護士の方がその場で結果をパソコンに入力するのですが、年配の方は一室5人分の入力に10分以上、下手したら20分くらいかかっています。
若い人はそれなりに（それでも文句を言いながらですが）やっていますし、「私は小学校でパソコン習った世代だから」なんて言いながらやってましたが、そうすると逆に「何でここはホイールでスクロールしないのかね」なんていう不満になっています。
しかも、たまに紙が併用されたりしますし、パソコンを使うのはもっぱら看護士で、医者や薬剤師はなぜか使わないのですが、そうすると「今までに飲んでた薬はありますか」という質問を同じ人に何度もしたりしています。頼んでたものが届いていなかったりもしてるようです。
なぜかパソコンのバッテリーも20～30分で切れてしまうそうです。最初に来たときはネットワーク（無線LAN）も切れていました。
よいことと言うと、受付システムも導入された結果、カードを入れれば受付終了で、受付完了まで待っている必要がなくなったと言うことでしょうか。
下記のページを見つけましたが、このような評価を続けていくことは必要でしょう。
http://www.jmcnet.co.jp/201/k4.html
しかし、もう少し段階的に導入するとかできないものでしょうか。2ヶ月前から講習はあったということではありますが・・・。</description></item><item><title>女子サッカーに感動</title><link>https://jqinglong.github.io/programmers-office/%E5%A5%B3%E5%AD%90%E3%82%B5%E3%83%83%E3%82%AB%E3%83%BC%E3%81%AB%E6%84%9F%E5%8B%95/</link><pubDate>Sat, 24 Apr 2004 13:26:48 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E5%A5%B3%E5%AD%90%E3%82%B5%E3%83%83%E3%82%AB%E3%83%BC%E3%81%AB%E6%84%9F%E5%8B%95/</guid><description>女子日本代表が、オリンピック出場を決めました。
結果もうれしいですが、戦いっぷりに感動です。
特に終盤の体を投げ打ってのディフェンスは、本当にすばらしかったです。
市船の昨年の高校選手権の決勝やこの前の天皇杯マリノス戦を思い出しました（応援ページにリンクを張っているように、市船サッカー好きなんです）。
個々の選手で言うと、11番大谷、6番酒井、5番川上が好きです。3人ともベトナム戦もよかったし、今日も良かったです。また、途中からでた19番丸山も魅せるプレーをしますね。
中国との決勝は広島だそうで、東京だったら見に行ったと思いますが、さすがに無理ですね。</description></item><item><title>ソフトウェア再利用とパターンに関する特別セミナー</title><link>https://jqinglong.github.io/programmers-office/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%A8%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E7%89%B9%E5%88%A5%E3%82%BB%E3%83%9F/</link><pubDate>Mon, 19 Apr 2004 13:00:45 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%A8%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E7%89%B9%E5%88%A5%E3%82%BB%E3%83%9F/</guid><description>明日、「ソフトウェア再利用とパターンに関する特別セミナー」というイベントがあり、行きたいと思っています。
http://patterns-wg.fuka.info.waseda.ac.jp/ps2004.html
と言うわけで、ちょっとだけ予習を。
RAS（Reusable Asset Specification）というのは、ABD（Asset-based development）のための仕様という事になります。再利用のための仕様が統一されることで、例えばツールが整備される等のメリットがあります。
下のIT ProのページにあるXDEのサンプルは、なかなか衝撃的です。
参考
http://itpro.nikkeibp.co.jp/free/ITPro/J2EE/20040330/1/</description></item><item><title>Seasarのからさわぎ</title><link>https://jqinglong.github.io/programmers-office/seasar%E3%81%AE%E3%81%8B%E3%82%89%E3%81%95%E3%82%8F%E3%81%8E/</link><pubDate>Sun, 18 Apr 2004 18:56:43 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/seasar%E3%81%AE%E3%81%8B%E3%82%89%E3%81%95%E3%82%8F%E3%81%8E/</guid><description>「Seasarのからさわぎ」というイベントがあったそうです。
http://www.starlogic.jp/pukiwiki/?Seasar%A4%CE%A4%AB%A4%E9%A4%B5%A4%EF%A4%AE
中身の前に、お題目としての
・Seasarの導入を阻んだひとこと
・ここがセクシー！だと感じるSeasarのコード
みたいなのりに笑ってしまいました。
社内打ち合わせの資料とかにはこののりは使えそうかな・・・
・マネしたくないと思うプロジェクト管理
・無性に反抗したくなる管理職の一言
・「再利用できない」と感じた瞬間
・・・やばい、やばい
中身ですが、
IoCとAOPのためのフレームワークということです。
http://seasar.sourceforge.jp/
と言っても、そんなに興味を持っていなかったのですが、
http://www.springframework.org/net/
というものがあるということで、ちょっと興味を持ってみようかなと言うところです。
参考
http://dann.dyndns.info/diary/</description></item><item><title>焼酎屋さん</title><link>https://jqinglong.github.io/programmers-office/%E7%84%BC%E9%85%8E%E5%B1%8B%E3%81%95%E3%82%93/</link><pubDate>Wed, 31 Mar 2004 15:32:37 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%84%BC%E9%85%8E%E5%B1%8B%E3%81%95%E3%82%93/</guid><description>朝日新聞2004年3月31日夕刊より
九州文化邑
http://e-bussan.co.jp/news/2003_01/0125.html
Sho-Chu AUTHORITY
http://www.kiteru.com/kakushi/kakushi-13.html
http://www.mikitei.jp/shop/authority.html</description></item><item><title>デブサミ2004</title><link>https://jqinglong.github.io/programmers-office/%E3%83%87%E3%83%96%E3%82%B5%E3%83%9F2004/</link><pubDate>Sat, 31 Jan 2004 06:12:10 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%87%E3%83%96%E3%82%B5%E3%83%9F2004/</guid><description>Developers Summit デブサミ2004、申し込んでいたんですけど行けませんでした。
http://www.seshop.com/event/dev/
最近、イベントに行くのも難しいなー、とちょっと悲しい気持ちです。</description></item><item><title>パタン・ランゲージ（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E3%83%91%E3%82%BF%E3%83%B3%E3%83%BB%E3%83%A9%E3%83%B3%E3%82%B2%E3%83%BC%E3%82%B8%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A/</link><pubDate>Sun, 25 Jan 2004 15:57:31 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%91%E3%82%BF%E3%83%B3%E3%83%BB%E3%83%A9%E3%83%B3%E3%82%B2%E3%83%BC%E3%82%B8%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A/</guid><description>「建築家であること」シリーズの最終回は、やはりこのネタになります。
85年にクリストファー・アレグザンダーの設計した盈進学園がオープンしたのですが、石山修武さんは「アレグザンダーの可能性と限界の両方をみてしまった」と言います。「彼が言っているパタン・ランゲージというものは、彼個人の頭の中、理念の中に全部集約されすぎていて、それを共有することが難しかったのではないか」「だから、施工の途中で非常に大きいトラブルもたくさんあったようですし、そのトラブルをリカバーできなかったのではないか。」ということです。
これはショックな発言です。私は、パターン・ランゲージ、デザインパターンは、コミュニケーションの質をあげるためのものと理解していたからです。
こちらの「盈進学園パタンランゲージ」というページで、実際のパターンが紹介されています。もしこれだけだとしたら確かに共有はできないでしょう。パターンランゲージであるからには、これだけではなく、「文脈」「問題」「解決」という形になっているとは思いますが。
以前も思いましたが、この辺は本当に実態、特にこの件を批判的に見る眼からの実際の状況を知りたいなと思います。</description></item><item><title>ジャン・ヌーベル展行ってきました</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%BB%E3%83%8C%E3%83%BC%E3%83%99%E3%83%AB%E5%B1%95%E8%A1%8C%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/</link><pubDate>Fri, 16 Jan 2004 17:16:32 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%BB%E3%83%8C%E3%83%BC%E3%83%99%E3%83%AB%E5%B1%95%E8%A1%8C%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%97%E3%81%9F/</guid><description>このタワーにはびっくりしました。
http://www.japandesign.ne.jp/HTM/JDNREPORT/031126/nouvel/l/15.html
http://www.japandesign.ne.jp/HTM/JDNREPORT/031126/nouvel/</description></item><item><title>美意識（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E7%BE%8E%E6%84%8F%E8%AD%98%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A%EF%BC%89/</link><pubDate>Sun, 11 Jan 2004 01:19:03 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E7%BE%8E%E6%84%8F%E8%AD%98%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A%EF%BC%89/</guid><description>同じく、内井昭蔵さんの発言で、日本人について「宗教がない上に、美意識が欠落してしまったらどうなるか、それがまさに今の状態なんですね」とありました。
ここの「美意識」は、多少広い意味で、例えば、「武士道」と置き換えると新渡戸稲造の「武士道」になるそうですし、しばしば「羞恥心」と置き換えられたりもすると思います。
個々のデザインの美ではなく、全体の美を追求したいとありますが、それもその通り、システムでも「これができればよい」ではなく、全体を考えながらやらないといけないですね。</description></item><item><title>コンペにおける世田谷方式（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%83%B3%E3%83%9A%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%B8%96%E7%94%B0%E8%B0%B7%E6%96%B9%E5%BC%8F%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8/</link><pubDate>Sat, 10 Jan 2004 12:49:10 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%83%B3%E3%83%9A%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%B8%96%E7%94%B0%E8%B0%B7%E6%96%B9%E5%BC%8F%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8/</guid><description>内井昭蔵さんのインタビューで、「世田谷方式－作品を選ぶコンペではなく建築家を選ぶという方法で、人を選んでくださった。建築家は職人のようなものですから、ここぞ、とほれ込まれたらそれにこたえない人はいないですよ」とありました。
世田谷方式というのは政策評価面で言われていることが多いようですが、ここでは世田谷区で進めている「新しい公共」という概念に基づいて、公私協働の観点で政策を進められる人を探すために行われた、という意味で話されているようです。
協働という観点は非常に重要だと思います。請け負う側でも協働できる依頼者を探すという観点で仕事をしていけると、お互いに成長でき、ひいては全体のレベルアップにつながると思うんですけどね。</description></item><item><title>デザイン・ガバナンス（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%AC%E3%83%90%E3%83%8A%E3%83%B3%E3%82%B9%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88/</link><pubDate>Tue, 06 Jan 2004 16:08:16 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%AC%E3%83%90%E3%83%8A%E3%83%B3%E3%82%B9%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88/</guid><description>大江匡さんのインタビューより。
建築の世界では、組織事務所とアトリエ派という分類の仕方があるそうです。大江さんは、アトリエ派はテクノロジーをアートから分離させた結果、クライアントから見放され、仕事の幅も住宅と公共建築のコンペしかなくなっていると批判しますが、他方「大手事務所は、デザイン・ガバナンス（管理）ができていません。組織事務所とはいえ、意外と属人的なところがあって、ものすごく良いデザインもありますが、確率的にはひどいデザインが多い。」と言います。
これは、情報共有という問題が絡むと思いますが、ナレッジマネージメントだとか何だとか言って、情報共有システムを生かそうとしても、本質は違うのかも知れないというのが、最近感じていることです。ちょっと昔の例で、アサヒビールの営業ノウハウのシステムなんかがよく話題になっていたように思いますが、そういうノウハウの共有のようにうまくいく例もあれば、行かない例もありますよね。アプリケーションの設計・プログラミングといった技術の伝達は掲示板システムのような場では十分にはできないのではないか、やはり弟子は師匠に付いて一緒に仕事をする必要があるのではないか。そういう意味で、ペアプロができるチームというのは、そのこと自体組織として成長できるチームであることを示しているような気がして、うちのチームはもう一皮向けないといけないかなと考えたりして・・・。</description></item><item><title>「2万項目」の要件（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E3%80%8C2%E4%B8%87%E9%A0%85%E7%9B%AE%E3%80%8D%E3%81%AE%E8%A6%81%E4%BB%B6%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A%EF%BC%89/</link><pubDate>Mon, 05 Jan 2004 14:11:55 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%80%8C2%E4%B8%87%E9%A0%85%E7%9B%AE%E3%80%8D%E3%81%AE%E8%A6%81%E4%BB%B6%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A%EF%BC%89/</guid><description>同じく、宮脇檀さんと吉田あこさんの対談より。
宮脇さん曰く「住宅建築というのは、例えば施主からの要求が1000項目あるとすると、我々の頭の中で考えている部分は2万項目くらいあるんです。だから我々は、ほとんど施主の言わないことをやっていると言ってもいいわけです。」
まったくその通りですね。で、最近は自分に自信がなくなってきて、「2万項目」の仕様書を書いてテストをしなければならないのかな、と考えていたりしたのですが、やっぱり、それは違うかもしれないです。これはプロの常識として、100パーセント間違いなくできているはずのことなのですから。</description></item><item><title>ジャン・ヌーベル展</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%BB%E3%83%8C%E3%83%BC%E3%83%99%E3%83%AB%E5%B1%95/</link><pubDate>Sun, 04 Jan 2004 13:21:16 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%BB%E3%83%8C%E3%83%BC%E3%83%99%E3%83%AB%E5%B1%95/</guid><description>東京オペラシティ アートギャラリーで、「建築家であること」にも出てくるジャン・ヌーベルさんの展覧会が開催中だそうです。
ジャン・ヌーベル展
2003.11.1［土］─ 2004.1.25［日］
http://www.operacity.jp/ag/exh46.html
汐留電通ビルのデザイナと言うことで、あまり好きではないかもしれませんが（偉そうに！＞自分）、おもしろそうだとは思うので、行ってみようかな。</description></item><item><title>プロの設計（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E3%83%97%E3%83%AD%E3%81%AE%E8%A8%AD%E8%A8%88%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A%EF%BC%89/</link><pubDate>Sun, 04 Jan 2004 13:00:01 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%83%97%E3%83%AD%E3%81%AE%E8%A8%AD%E8%A8%88%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%80%8D%E3%82%88%E3%82%8A%EF%BC%89/</guid><description>続いて、宮脇檀さんと吉田あこさんの対談より。
高齢者に優しい住宅の研究を進めるという吉田さんの発言に、「建築家に手すりをつけさせるというのはなかなか大変なことなんです」「手すりを両側に付けるということもなかなかやってくれないんですよ。なぜ両側に必要なのか、と言われるんですね。」「なぜかと言うと、日本人には脳卒中で亡くなる方が非常に多いんですが、脳卒中というのは一方の手足が利かなくなるんです。だから上るときと下りるときで両側に手すりが必要になるわけです。」とありました。
実は、去年、身近な親類がこのような状況で家を建てたのですが、言っておいたにもかかわらず玄関に段差はあるし、廊下は狭いし、という有様で、昨日遊びに行ったのですが、案の定、手すりは片方にしかありませんでした。
これまでの「普通」の家としては別に問題ないわけで、間違いなくプロの方が設計をしているわけですが、身障者のための家という観点からみたとき、この方は十分なノウハウを持っていなかったわけです。
この点について言えば、おそらく今後はこのような配慮をすることが「普通」の家にも求められてくると思いますが、個々の案件では普通になるのを待ってはいられません。
例えば、今はブラウザで入力欄を移動するのはTabキーを打つのが普通でしょう。これが将来Enterキーで移動するのが普通になる可能性はあると思います。でも、明日伝票を左手に持って右手で入力しなければならない人にとっては、それを待ってはいられないかもしれないわけです。これをプロだからといって、「普通はTabキーでの移動ですから、Enterキーで移動するようにしてしまうと、他のページと違和感を感じてしまいますよ」と片づけてしまうのではなく、利用者の声に耳を傾けて、本当の理由を探る必要はあると思うのです。そして、色々な専門に深いノウハウを持つ努力も続けなければいけないなと思います。
（もちろん、何でも利用者の声を聞けばよいわけではないだろうというのはコンポーネントの話に書いたとおりですし、不特定多数の人が使う場合には違和感の問題の方が大きくなるので、ケースバイケースなのは言うまでもありませんね）</description></item><item><title>コンポーネントの考え方？（「建築家であること」より）</title><link>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%EF%BC%9F%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8/</link><pubDate>Sun, 04 Jan 2004 11:56:21 +0000</pubDate><guid>https://jqinglong.github.io/programmers-office/%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%EF%BC%9F%EF%BC%88%E3%80%8C%E5%BB%BA%E7%AF%89%E5%AE%B6%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8/</guid><description>今年も、去年に続いて、正月休みは建築の本を読んでみました。
「建築家であること」（日経BP社）
しばらく、この中でおもしろかったことをネタにしてみたいと思います。
本の内容は、色々な建築家に対するインタビュー集で、共感できる人、とても受け入れられない人、色々でおもしろかったです。
さて、まずは山本理顕さんのインタビューの中から、考えさせられた話を取り上げたいと思います。
設計者が提案するにあたっても色々な制約があるという話題の中で、「老人介護や入浴サービスなど自治体が持っている様々な移動サービスや民間の共同購入のための場所などをドッキングするようなプランを考えいています。そうすると施設自体はローコストで済みます。」という話が出てきました。
これは、まさにコンポーネントの考え方だと思います。
とても合理的で、有用ではないかと思いました。しかし、きっとこの考え方も、色々な制約にぶつかるのだと思います。
この建物を建てる人は、自分で介護施設を作らなかったことになりますし、自治体のサービス以上のサービスを提供することもできなくなります。
口では合理性を言っても、結局は自分の支配下に持っておきたいという考えはきっとあると思うのです。
ソフトウェアを作るときも、コンポーネントそれ自体では十分な機能を持たなくなるのですが、他との組み合わせや拡張の時にトータルのコストダウンの効果を発揮することになるわけで、長い目で見る必要があると思うのです。でも、目の前にあるものに不満を感じてしまうと、なんで元からこういう機能を持っていないのか、という不満になってしまうわけです。
もちろん、そこまでのヒアリングをして、コンポーネントを組み合わせることによって、十分な機能を持たせたアプリケーションを作らなければいけないのですが、作る側・使う側双方の意志が同じ方向を向く必要はあるなと思います。</description></item></channel></rss>